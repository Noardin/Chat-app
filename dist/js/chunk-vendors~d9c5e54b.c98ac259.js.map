{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/mixin-tbody-row.js","webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/mixin-tbody.js","webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/mixin-tfoot.js"],"names":["exports","__esModule","default","_toString","_interopRequireDefault","__webpack_require__","_get","_keyCodes","_array","_filterEvent","_textSelectionActive","obj","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_default","props","tbodyTrClass","type","String","Array","Function","methods","tdClasses","field","item","cellVariant","_cellVariants","this","dark","variant","class","getTdValues","tdClass","tdAttrs","colIndex","attrs","role","aria-colindex","isRowHeader","scope","isStacked","label","tdAttr","rowClasses","_rowVariant","tdValue","defValue","parent","$parent","getFormattedValue","formatter","tbodyRowKeydown","evt","rowIndex","keyCode","trs","$refs","itemRows","stopIfBusy","tagName","document","activeElement","tabIndex","index","indexOf","ENTER","SPACE","stopPropagation","preventDefault","rowClicked","arrayIncludes","UP","DOWN","HOME","END","shift","shiftKey","focus","e","$el","$emit","middleMouseRowClicked","rowDblClicked","rowHovered","rowUnhovered","rowContextmenu","renderTbodyRowCell","_this","h","$createElement","$scoped","$scopedSlots","detailsSlot","rowSelected","selectedRows","formatted","data","toggleDetailsFn","$set","_showDetails","slotScope","unformatted","toggleDetails","detailsShowing","Boolean","$childNodes","renderTbodyRow","_this2","fields","computedFields","tableStriped","striped","hasRowClickHandler","$listeners","selectable","$detailsSlot","rowShowDetails","$rows","detailsId","safeId","$tds","map","ariaRowIndex","currentPage","perPage","primaryKey","rowKey","undefined","rowId","handlers","push","ref","refInFor","selectableRowClasses","b-table-has-details","id","tabindex","data-pk","aria-describedby","aria-owns","aria-rowindex","selectableRowAttrs","on","auxclick","which","contextmenu","dblclick","mouseenter","mouseleave","colspan","trAttrs","$details","staticClass","aria-hidden","_mixinTbodyRow","_mixinEmpty","_mixinTopRow","_mixinBottomRow","mixins","tbodyClass","tbodyTransitionProps","tbodyTransitionHandlers","renderTbody","items","computedItems","$busy","renderBusy","renderTopRow","renderEmpty","renderBottomRow","isTransGroup","tbodyProps","tbodyOn","tag","$tbody","footClone","footVariant","tfootClass","tfootTrClass","computed","footClasses","headVariant","renderTfoot","renderThead"],"mappings":"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","file":"js/chunk-vendors~d9c5e54b.c98ac259.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _toString = _interopRequireDefault(require(\"../../../utils/to-string\"));\n\nvar _get = _interopRequireDefault(require(\"../../../utils/get\"));\n\nvar _keyCodes = _interopRequireDefault(require(\"../../../utils/key-codes\"));\n\nvar _array = require(\"../../../utils/array\");\n\nvar _filterEvent = _interopRequireDefault(require(\"./filter-event\"));\n\nvar _textSelectionActive = _interopRequireDefault(require(\"./text-selection-active\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _default = {\n  props: {\n    tbodyTrClass: {\n      type: [String, Array, Function],\n      default: null\n    }\n  },\n  methods: {\n    // Methods for computing classes, attributes and styles for table cells\n    tdClasses: function tdClasses(field, item) {\n      var cellVariant = '';\n\n      if (item._cellVariants && item._cellVariants[field.key]) {\n        cellVariant = \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(item._cellVariants[field.key]);\n      }\n\n      return [field.variant && !cellVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(field.variant) : '', cellVariant, field.class ? field.class : '', this.getTdValues(item, field.key, field.tdClass, '')];\n    },\n    tdAttrs: function tdAttrs(field, item, colIndex) {\n      var attrs = {\n        role: 'cell',\n        'aria-colindex': String(colIndex + 1)\n      };\n\n      if (field.isRowHeader) {\n        attrs.scope = 'row';\n        attrs.role = 'rowheader';\n      }\n\n      if (this.isStacked) {\n        // Generate the \"header cell\" label content in stacked mode\n        attrs['data-label'] = field.label;\n      }\n\n      return _objectSpread({}, attrs, this.getTdValues(item, field.key, field.tdAttr, {}));\n    },\n    rowClasses: function rowClasses(item) {\n      return [item._rowVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(item._rowVariant) : '', typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(item, 'row') : this.tbodyTrClass];\n    },\n    getTdValues: function getTdValues(item, key, tdValue, defValue) {\n      var parent = this.$parent;\n\n      if (tdValue) {\n        var value = (0, _get.default)(item, key, '');\n\n        if (typeof tdValue === 'function') {\n          return tdValue(value, key, item);\n        } else if (typeof tdValue === 'string' && typeof parent[tdValue] === 'function') {\n          return parent[tdValue](value, key, item);\n        }\n\n        return tdValue;\n      }\n\n      return defValue;\n    },\n    // Method to get the value for a field\n    getFormattedValue: function getFormattedValue(item, field) {\n      var key = field.key;\n      var formatter = field.formatter;\n      var parent = this.$parent;\n      var value = (0, _get.default)(item, key, null);\n\n      if (formatter) {\n        if (typeof formatter === 'function') {\n          value = formatter(value, key, item);\n        } else if (typeof formatter === 'string' && typeof parent[formatter] === 'function') {\n          value = parent[formatter](value, key, item);\n        }\n      }\n\n      return value === null || typeof value === 'undefined' ? '' : value;\n    },\n    tbodyRowKeydown: function tbodyRowKeydown(evt, item, rowIndex) {\n      var keyCode = evt.keyCode;\n      var target = evt.target;\n      var trs = this.$refs.itemRows;\n\n      if (this.stopIfBusy(evt)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (!(target && target.tagName === 'TR' && target === document.activeElement)) {\n        // Ignore if not the active tr element\n        return;\n      } else if (target.tabIndex !== 0) {\n        // Ignore if not focusable\n\n        /* istanbul ignore next */\n        return;\n      } else if (trs && trs.length === 0) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var index = trs.indexOf(target);\n\n      if (keyCode === _keyCodes.default.ENTER || keyCode === _keyCodes.default.SPACE) {\n        evt.stopPropagation();\n        evt.preventDefault(); // We also allow enter/space to trigger a click (when row is focused)\n        // We translate to a row-clicked event\n\n        this.rowClicked(evt, item, rowIndex);\n      } else if ((0, _array.arrayIncludes)([_keyCodes.default.UP, _keyCodes.default.DOWN, _keyCodes.default.HOME, _keyCodes.default.END], keyCode)) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        var shift = evt.shiftKey;\n\n        if (keyCode === _keyCodes.default.HOME || shift && keyCode === _keyCodes.default.UP) {\n          // Focus first row\n          trs[0].focus();\n        } else if (keyCode === _keyCodes.default.END || shift && keyCode === _keyCodes.default.DOWN) {\n          // Focus last row\n          trs[trs.length - 1].focus();\n        } else if (keyCode === _keyCodes.default.UP && index > 0) {\n          // Focus previous row\n          trs[index - 1].focus();\n        } else if (keyCode === _keyCodes.default.DOWN && index < trs.length - 1) {\n          // Focus next row\n          trs[index + 1].focus();\n        }\n      }\n    },\n    // Row event handlers\n    rowClicked: function rowClicked(e, item, index) {\n      if (this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if ((0, _filterEvent.default)(e)) {\n        // clicked on a non-disabled control so ignore\n        return;\n      } else if ((0, _textSelectionActive.default)(this.$el)) {\n        // User is selecting text, so ignore\n\n        /* istanbul ignore next: JSDOM doesn't support getSelection() */\n        return;\n      }\n\n      this.$emit('row-clicked', item, index, e);\n    },\n    middleMouseRowClicked: function middleMouseRowClicked(e, item, index) {\n      if (this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-middle-clicked', item, index, e);\n    },\n    rowDblClicked: function rowDblClicked(e, item, index) {\n      if (this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if ((0, _filterEvent.default)(e)) {\n        // clicked on a non-disabled control so ignore\n\n        /* istanbul ignore next: event filtering already tested via click handler */\n        return;\n      }\n\n      this.$emit('row-dblclicked', item, index, e);\n    },\n    rowHovered: function rowHovered(e, item, index) {\n      if (this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-hovered', item, index, e);\n    },\n    rowUnhovered: function rowUnhovered(e, item, index) {\n      if (this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-unhovered', item, index, e);\n    },\n    rowContextmenu: function rowContextmenu(e, item, index) {\n      if (this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-contextmenu', item, index, e);\n    },\n    // Render helpers\n    renderTbodyRowCell: function renderTbodyRowCell(field, colIndex, item, rowIndex) {\n      var _this = this;\n\n      var h = this.$createElement; // Renders a TD or TH for a row's field\n\n      var $scoped = this.$scopedSlots;\n      var detailsSlot = $scoped['row-details'];\n      var rowSelected = this.selectedRows[rowIndex];\n      var formatted = this.getFormattedValue(item, field);\n      var data = {\n        // For the Vue key, we concatinate the column index and field key (as field keys can be duplicated)\n        key: \"row-\".concat(rowIndex, \"-cell-\").concat(colIndex, \"-\").concat(field.key),\n        class: this.tdClasses(field, item),\n        attrs: this.tdAttrs(field, item, colIndex)\n      };\n\n      var toggleDetailsFn = function toggleDetailsFn() {\n        if (detailsSlot) {\n          _this.$set(item, '_showDetails', !item._showDetails);\n        }\n      };\n\n      var slotScope = {\n        item: item,\n        index: rowIndex,\n        field: field,\n        unformatted: (0, _get.default)(item, field.key, ''),\n        value: formatted,\n        toggleDetails: toggleDetailsFn,\n        detailsShowing: Boolean(item._showDetails),\n        rowSelected: Boolean(rowSelected)\n      };\n      var $childNodes = $scoped[field.key] ? $scoped[field.key](slotScope) : (0, _toString.default)(formatted);\n\n      if (this.isStacked) {\n        // We wrap in a DIV to ensure rendered as a single cell when visually stacked!\n        $childNodes = [h('div', {}, [$childNodes])];\n      } // Render either a td or th cell\n\n\n      return h(field.isRowHeader ? 'th' : 'td', data, [$childNodes]);\n    },\n    renderTbodyRow: function renderTbodyRow(item, rowIndex) {\n      var _this2 = this;\n\n      // Renders an item's row (or rows if details supported)\n      var h = this.$createElement;\n      var $scoped = this.$scopedSlots;\n      var fields = this.computedFields;\n      var tableStriped = this.striped;\n      var hasRowClickHandler = this.$listeners['row-clicked'] || this.selectable;\n      var $detailsSlot = $scoped['row-details'];\n      var rowShowDetails = Boolean(item._showDetails && $detailsSlot); // We can return more than one TR if rowDetails enabled\n\n      var $rows = []; // Details ID needed for aria-describedby when details showing\n\n      var detailsId = rowShowDetails ? this.safeId(\"_details_\".concat(rowIndex, \"_\")) : null;\n\n      var toggleDetailsFn = function toggleDetailsFn() {\n        if ($detailsSlot) {\n          _this2.$set(item, '_showDetails', !item._showDetails);\n        }\n      }; // For each item data field in row\n\n\n      var $tds = fields.map(function (field, colIndex) {\n        return _this2.renderTbodyRowCell(field, colIndex, item, rowIndex);\n      }); // Calculate the row number in the dataset (indexed from 1)\n\n      var ariaRowIndex = null;\n\n      if (this.currentPage && this.perPage && this.perPage > 0) {\n        ariaRowIndex = String((this.currentPage - 1) * this.perPage + rowIndex + 1);\n      } // Create a unique :key to help ensure that sub components are re-rendered rather than\n      // re-used, which can cause issues. If a primary key is not provided we use the rendered\n      // rows index within the tbody.\n      // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2410\n\n\n      var primaryKey = this.primaryKey;\n      var rowKey = primaryKey && item[primaryKey] !== undefined && item[primaryKey] !== null ? (0, _toString.default)(item[primaryKey]) : String(rowIndex); // If primary key is provided, use it to generate a unique ID on each tbody > tr\n      // In the format of '{tableId}__row_{primaryKeyValue}'\n\n      var rowId = primaryKey && item[primaryKey] !== undefined && item[primaryKey] !== null ? this.safeId(\"_row_\".concat(item[primaryKey])) : null;\n      var handlers = {};\n\n      if (hasRowClickHandler) {\n        handlers['click'] = function (evt) {\n          _this2.rowClicked(evt, item, rowIndex);\n        };\n\n        handlers['keydown'] = function (evt) {\n          _this2.tbodyRowKeydown(evt, item, rowIndex);\n        };\n      } // Add the item row\n\n\n      $rows.push(h('tr', {\n        key: \"__b-table-row-\".concat(rowKey, \"__\"),\n        ref: 'itemRows',\n        refInFor: true,\n        class: [this.rowClasses(item), this.selectableRowClasses(rowIndex), {\n          'b-table-has-details': rowShowDetails\n        }],\n        attrs: _objectSpread({\n          id: rowId,\n          tabindex: hasRowClickHandler ? '0' : null,\n          'data-pk': rowId ? String(item[primaryKey]) : null,\n          'aria-describedby': detailsId,\n          'aria-owns': detailsId,\n          'aria-rowindex': ariaRowIndex,\n          role: 'row'\n        }, this.selectableRowAttrs(rowIndex)),\n        on: _objectSpread({}, handlers, {\n          // TODO: instatiate the following handlers only if we have registered\n          //       listeners i.e. this.$listeners['row-middle-clicked'], etc.\n          auxclick: function auxclick(evt) {\n            if (evt.which === 2) {\n              _this2.middleMouseRowClicked(evt, item, rowIndex);\n            }\n          },\n          contextmenu: function contextmenu(evt) {\n            _this2.rowContextmenu(evt, item, rowIndex);\n          },\n          // Note: these events are not accessibility friendly!\n          dblclick: function dblclick(evt) {\n            _this2.rowDblClicked(evt, item, rowIndex);\n          },\n          mouseenter: function mouseenter(evt) {\n            _this2.rowHovered(evt, item, rowIndex);\n          },\n          mouseleave: function mouseleave(evt) {\n            _this2.rowUnhovered(evt, item, rowIndex);\n          }\n        })\n      }, $tds)); // Row Details slot\n\n      if (rowShowDetails) {\n        var tdAttrs = {\n          colspan: String(fields.length),\n          role: 'cell'\n        };\n        var trAttrs = {\n          id: detailsId,\n          role: 'row' // Render the details slot\n\n        };\n        var $details = h('td', {\n          attrs: tdAttrs\n        }, [$detailsSlot({\n          item: item,\n          index: rowIndex,\n          fields: fields,\n          toggleDetails: toggleDetailsFn\n        })]); // Add a hidden row to keep table row striping consistent when details showing\n\n        if (tableStriped) {\n          $rows.push(h('tr', {\n            key: \"__b-table-details-\".concat(rowIndex, \"-stripe__\"),\n            staticClass: 'd-none',\n            attrs: {\n              'aria-hidden': 'true',\n              role: 'presentation'\n            }\n          }));\n        } // Add the actual details row\n\n\n        $rows.push(h('tr', {\n          key: \"__b-table-details-\".concat(rowIndex, \"__\"),\n          staticClass: 'b-table-details',\n          class: [typeof this.tbodyTrClass === 'function' ? this.tbodyTrClass(item, 'row-details') : this.tbodyTrClass],\n          attrs: trAttrs\n        }, [$details]));\n      } else if ($detailsSlot) {\n        // Only add the placeholder if a the table has a row-details slot defined (but not shown)\n        $rows.push(h(false));\n\n        if (tableStriped) {\n          // add extra placeholder if table is striped\n          $rows.push(h(false));\n        }\n      } // Return the row(s)\n\n\n      return $rows;\n    }\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _mixinTbodyRow = _interopRequireDefault(require(\"./mixin-tbody-row\"));\n\nvar _mixinEmpty = _interopRequireDefault(require(\"./mixin-empty\"));\n\nvar _mixinTopRow = _interopRequireDefault(require(\"./mixin-top-row\"));\n\nvar _mixinBottomRow = _interopRequireDefault(require(\"./mixin-bottom-row\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// busy mixin is imported in main table.js as it is used by multiple mixins\nvar _default = {\n  mixins: [_mixinTbodyRow.default, _mixinEmpty.default, _mixinTopRow.default, _mixinBottomRow.default],\n  props: {\n    tbodyClass: {\n      type: [String, Array],\n      default: null\n    },\n    tbodyTransitionProps: {\n      type: Object // default: undefined\n\n    },\n    tbodyTransitionHandlers: {\n      type: Object // default: undefined\n\n    }\n  },\n  methods: {\n    renderTbody: function renderTbody() {\n      var _this = this;\n\n      // Render the tbody element and children\n      var h = this.$createElement;\n      var items = this.computedItems; // Prepare the tbody rows\n\n      var $rows = []; // Add the item data rows or the busy slot\n\n      var $busy = this.renderBusy();\n\n      if ($busy) {\n        // If table is busy and a busy slot, then return only the busy \"row\" indicator\n        $rows.push($busy);\n      } else {\n        // Table isn't bsuy, or we don't have a busy slot\n        // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\n        $rows.push(this.renderTopRow()); // render the rows\n\n        items.forEach(function (item, rowIndex) {\n          // Render the individual item row (rows if details slot)\n          $rows.push(_this.renderTbodyRow(item, rowIndex));\n        }); // Empty Items / Empty Filtered Row slot (only shows if items.length < -\n\n        $rows.push(this.renderEmpty()); // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)\n\n        $rows.push(this.renderBottomRow());\n      } // If tbody transition enabled\n\n\n      var isTransGroup = this.tbodyTransitionProps || this.tbodyTransitionHandlers;\n      var tbodyProps = {};\n      var tbodyOn = {};\n\n      if (isTransGroup) {\n        tbodyOn = this.tbodyTransitionHandlers || {};\n        tbodyProps = _objectSpread({}, this.tbodyTransitionProps || {}, {\n          tag: 'tbody'\n        });\n      } // Assemble rows into the tbody\n\n\n      var $tbody = h(isTransGroup ? 'transition-group' : 'tbody', {\n        props: tbodyProps,\n        on: tbodyOn,\n        class: [this.tbodyClass],\n        attrs: {\n          role: 'rowgroup'\n        }\n      }, $rows); // Return the assembled tbody\n\n      return $tbody;\n    }\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _default = {\n  props: {\n    footClone: {\n      type: Boolean,\n      default: false\n    },\n    footVariant: {\n      type: String,\n      default: ''\n    },\n    tfootClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    tfootTrClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    footClasses: function footClasses() {\n      var variant = this.footVariant || this.headVariant || null;\n      return [variant ? 'thead-' + variant : '', this.tfootClass];\n    }\n  },\n  methods: {\n    renderTfoot: function renderTfoot() {\n      var h = this.$createElement; // Passing true to renderThead will make it render a tfoot\n\n      return this.footClone ? this.renderThead(true) : h(false);\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}