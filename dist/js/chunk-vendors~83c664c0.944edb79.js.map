{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/directives/tooltip/index.js","webpack:///./node_modules/bootstrap-vue/es/directives/tooltip/tooltip.js","webpack:///./node_modules/bootstrap-vue/es/directives/toggle/toggle.js","webpack:///./node_modules/bootstrap-vue/es/directives/toggle/index.js"],"names":["exports","__esModule","default","_tooltip","_interopRequireDefault","__webpack_require__","_plugins","obj","directives","BTooltip","_default","install","installFactory","_popper","_env","_object","_warn","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_typeof","Symbol","iterator","constructor","prototype","BV_TOOLTIP","validTriggers","focus","hover","click","blur","parseBindings","bindings","config","title","arg","container","modifiers","mod","test","html","animation","placement","boundary","delay","parseInt","slice","offset","selectedTriggers","triggers","trigger","trim","split","join","applyTooltip","el","vnode","inBrowser","updateConfig","context","$root","removeTooltip","destroy","bind","inserted","update","oldValue","componentUpdated","unbind","_dom","_target","listenTypes","BV_TOGGLE","BV_TOGGLE_STATE","BV_TOGGLE_CONTROLS","BV_TOGGLE_TARGETS","EVENT_TOGGLE","EVENT_STATE","EVENT_STATE_SYNC","resetProp","prop","handleUpdate","binding","addClass","setAttr","removeClass","targets","bindTargets","_ref","$emit","tagName","id","state","indexOf","$on","updated","unbindTargets","$off","removeAttr","_toggle","BToggle"],"mappings":"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","file":"js/chunk-vendors~83c664c0.944edb79.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _tooltip = _interopRequireDefault(require(\"./tooltip\"));\n\nvar _plugins = require(\"../../utils/plugins\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar directives = {\n  BTooltip: _tooltip.default\n};\nvar _default = {\n  install: (0, _plugins.installFactory)({\n    directives: directives\n  })\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _popper = _interopRequireDefault(require(\"popper.js\"));\n\nvar _tooltip = _interopRequireDefault(require(\"../../utils/tooltip.class\"));\n\nvar _env = require(\"../../utils/env\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _warn = _interopRequireDefault(require(\"../../utils/warn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Key which we use to store tooltip object on element\nvar BV_TOOLTIP = '__BV_ToolTip__'; // Valid event triggers\n\nvar validTriggers = {\n  focus: true,\n  hover: true,\n  click: true,\n  blur: true // Build a ToolTip config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  /* istanbul ignore next: not easy to test */\n\n};\n\nvar parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  // We start out with a blank config\n  var config = {}; // Process bindings.value\n\n  if (typeof bindings.value === 'string') {\n    // Value is tooltip content (html optionally supported)\n    config.title = bindings.value;\n  } else if (typeof bindings.value === 'function') {\n    // Title generator function\n    config.title = bindings.value;\n  } else if (_typeof(bindings.value) === 'object') {\n    // Value is config object, so merge\n    config = _objectSpread({}, config, bindings.value);\n  } // If argument, assume element ID of container element\n\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.container = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  (0, _object.keys)(bindings.modifiers).forEach(function (mod) {\n    if (/^html$/.test(mod)) {\n      // Title allows HTML\n      config.html = true;\n    } else if (/^nofade$/.test(mod)) {\n      // No animation\n      config.animation = false;\n    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\n      // Placement of tooltip\n      config.placement = mod;\n    } else if (/^(window|viewport)$/.test(mod)) {\n      // Boundary of tooltip\n      config.boundary = mod;\n    } else if (/^d\\d+$/.test(mod)) {\n      // Delay value\n      var delay = parseInt(mod.slice(1), 10) || 0;\n\n      if (delay) {\n        config.delay = delay;\n      }\n    } else if (/^o-?\\d+$/.test(mod)) {\n      // Offset value, negative allowed\n      var offset = parseInt(mod.slice(1), 10) || 0;\n\n      if (offset) {\n        config.offset = offset;\n      }\n    }\n  }); // Special handling of event trigger modifiers trigger is\n  // a space separated list\n\n  var selectedTriggers = {}; // Parse current config object trigger\n\n  var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\\s+/) : [];\n  triggers.forEach(function (trigger) {\n    if (validTriggers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Parse modifiers for triggers\n\n  (0, _object.keys)(validTriggers).forEach(function (trigger) {\n    if (bindings.modifiers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Sanitize triggers\n\n  config.trigger = (0, _object.keys)(selectedTriggers).join(' ');\n\n  if (config.trigger === 'blur') {\n    // Blur by itself is useless, so convert it to 'focus'\n    config.trigger = 'focus';\n  }\n\n  if (!config.trigger) {\n    // Remove trigger config\n    delete config.trigger;\n  }\n\n  return config;\n}; // Add or update ToolTip on our element\n\n\nvar applyTooltip = function applyTooltip(el, bindings, vnode) {\n  if (!_env.inBrowser) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  if (!_popper.default) {\n    // Popper is required for ToolTips to work\n\n    /* istanbul ignore next */\n    (0, _warn.default)('v-b-tooltip: Popper.js is required for ToolTips to work');\n    /* istanbul ignore next */\n\n    return;\n  }\n\n  var config = parseBindings(bindings);\n\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].updateConfig(config);\n  } else {\n    el[BV_TOOLTIP] = new _tooltip.default(el, config, vnode.context.$root);\n  }\n}; // Remove ToolTip on our element\n\n\nvar removeTooltip = function removeTooltip(el) {\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].destroy();\n    el[BV_TOOLTIP] = null;\n    delete el[BV_TOOLTIP];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar _default = {\n  bind: function bind(el, bindings, vnode) {\n    applyTooltip(el, bindings, vnode);\n  },\n  inserted: function inserted(el, bindings, vnode) {\n    applyTooltip(el, bindings, vnode);\n  },\n  update: function update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyTooltip(el, bindings, vnode);\n    }\n  },\n  componentUpdated: function componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyTooltip(el, bindings, vnode);\n    }\n  },\n  unbind: function unbind(el) {\n    removeTooltip(el);\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _env = require(\"../../utils/env\");\n\nvar _target = require(\"../../utils/target\");\n\n// Target listen types\nvar listenTypes = {\n  click: true // Property key for handler storage\n\n};\nvar BV_TOGGLE = '__BV_toggle__';\nvar BV_TOGGLE_STATE = '__BV_toggle_STATE__';\nvar BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\nvar BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\nvar EVENT_STATE = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n// Gets emitted even if the state of b-collapse has not changed.\n// This event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Reset and remove a property from the provided element\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n/* istanbul ignore next: not easy to test */\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  if (!_env.inBrowser) {\n    return;\n  } // Ensure the collapse class and aria-* attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or it's contents\n\n\n  if (el[BV_TOGGLE_STATE] === true) {\n    (0, _dom.addClass)(el, 'collapsed');\n    (0, _dom.setAttr)(el, 'aria-expanded', 'true');\n  } else if (el[BV_TOGGLE_STATE] === false) {\n    (0, _dom.removeClass)(el, 'collapsed');\n    (0, _dom.setAttr)(el, 'aria-expanded', 'false');\n  }\n\n  (0, _dom.setAttr)(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n};\n/*\n * Export our directive\n */\n\n\nvar _default = {\n  bind: function bind(el, binding, vnode) {\n    var targets = (0, _target.bindTargets)(vnode, binding, listenTypes, function (_ref) {\n      var targets = _ref.targets,\n          vnode = _ref.vnode;\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_TOGGLE, target);\n      });\n    });\n\n    if (_env.inBrowser && vnode.context && targets.length > 0) {\n      // Add targets array to element\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n      el[BV_TOGGLE_STATE] = false;\n      (0, _dom.setAttr)(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n      (0, _dom.setAttr)(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n      if (el.tagName !== 'BUTTON') {\n        (0, _dom.setAttr)(el, 'role', 'button');\n      } // Toggle state handler, stored on element\n\n\n      el[BV_TOGGLE] = function toggleDirectiveHandler(id, state) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          (0, _dom.setAttr)(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n          el[BV_TOGGLE_STATE] = state;\n\n          if (state) {\n            (0, _dom.removeClass)(el, 'collapsed');\n          } else {\n            (0, _dom.addClass)(el, 'collapsed');\n          }\n        }\n      }; // Listen for toggle state changes (public)\n\n\n      vnode.context.$root.$on(EVENT_STATE, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n      vnode.context.$root.$on(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    }\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode)\n  /* istanbul ignore next */\n  {\n    (0, _target.unbindTargets)(vnode, binding, listenTypes); // Remove our $root listener\n\n    if (el[BV_TOGGLE]) {\n      vnode.context.$root.$off(EVENT_STATE, el[BV_TOGGLE]);\n      vnode.context.$root.$off(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    } // Reset custom  props\n\n\n    resetProp(el, BV_TOGGLE);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_CONTROLS);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n    (0, _dom.removeClass)(el, 'collapsed');\n    (0, _dom.removeAttr)(el, 'aria-expanded');\n    (0, _dom.removeAttr)(el, 'aria-controls');\n    (0, _dom.removeAttr)(el, 'role');\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _toggle = _interopRequireDefault(require(\"./toggle\"));\n\nvar _plugins = require(\"../../utils/plugins\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar directives = {\n  BToggle: _toggle.default\n};\nvar _default = {\n  install: (0, _plugins.installFactory)({\n    directives: directives\n  })\n};\nexports.default = _default;"],"sourceRoot":""}