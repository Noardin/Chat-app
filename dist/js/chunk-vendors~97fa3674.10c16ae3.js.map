{"version":3,"sources":["webpack:///./src/node_modules/engine.io-client/lib/transports/polling-xhr.js","webpack:///./src/node_modules/engine.io-client/lib/transports/polling-jsonp.js","webpack:///./src/node_modules/engine.io-client/lib/transports/polling.js","webpack:///./src/node_modules/engine.io-client/lib/transports/index.js"],"names":["XMLHttpRequest","__webpack_require__","Polling","Emitter","inherit","debug","empty","XHR","opts","call","this","requestTimeout","extraHeaders","location","isSSL","protocol","port","xd","hostname","xs","secure","Request","method","uri","async","data","undefined","agent","isBinary","supportsBinary","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","create","module","exports","prototype","request","doWrite","fn","req","self","on","err","onError","sendXhr","doPoll","onData","pollXhr","xdomain","xscheme","xhr","open","i","setDisableHeaderCheck","hasOwnProperty","setRequestHeader","e","withCredentials","timeout","hasXDR","onload","onLoad","onerror","responseText","onreadystatechange","readyState","contentType","getResponseHeader","responseType","status","setTimeout","send","document","index","requestsCount","requests","onSuccess","emit","cleanup","fromError","abort","response","XDomainRequest","attachEvent","unloadHandler","addEventListener","terminationEvent","global","JSONPPolling","callbacks","rNewline","rEscapedNewline","glob","window","query","___eio","length","push","msg","j","script","doClose","parentNode","removeChild","form","iframe","createElement","src","insertAt","getElementsByTagName","insertBefore","head","body","appendChild","isUAgecko","navigator","test","userAgent","area","id","iframeId","className","style","position","top","left","target","setAttribute","name","complete","initIframe","html","action","replace","value","submit","Transport","parseqs","parser","yeast","hasXHR2","forceBase64","doOpen","poll","pause","onPause","polling","writable","total","once","callback","packet","onOpen","type","onClose","onPacket","decodePayload","socket","binaryType","close","write","packets","callbackfn","encodePayload","schema","timestampRequests","timestampParam","sid","b64","encode","Number","ipv6","indexOf","path","JSONP","websocket","jsonp","forceJSONP","Error"],"mappings":"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","file":"js/chunk-vendors~97fa3674.10c16ae3.js","sourcesContent":["/* global attachEvent */\n\n/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar Polling = require('./polling');\nvar Emitter = require('component-emitter');\nvar inherit = require('component-inherit');\nvar debug = require('debug')('engine.io-client:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n  this.extraHeaders = opts.extraHeaders;\n\n  if (typeof location !== 'undefined') {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 2) {\n          try {\n            var contentType = xhr.getResponseHeader('Content-Type');\n            if (self.supportsBinary && contentType === 'application/octet-stream') {\n              xhr.responseType = 'arraybuffer';\n            }\n          } catch (e) {}\n        }\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (typeof document !== 'undefined') {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (typeof document !== 'undefined') {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type');\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      data = this.xhr.responseText;\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== 'undefined') {\n  if (typeof attachEvent === 'function') {\n    attachEvent('onunload', unloadHandler);\n  } else if (typeof addEventListener === 'function') {\n    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n","/**\n * Module requirements.\n */\n\nvar Polling = require('./polling');\nvar inherit = require('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * Until https://github.com/tc39/proposal-global is shipped.\n */\nfunction glob () {\n  return typeof self !== 'undefined' ? self\n      : typeof window !== 'undefined' ? window\n      : typeof global !== 'undefined' ? global : {};\n}\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    var global = glob();\n    callbacks = global.___eio = (global.___eio || []);\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (typeof addEventListener === 'function') {\n    addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function (e) {\n    self.onError('jsonp poll error', e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  if (insertAt) {\n    insertAt.parentNode.insertBefore(script, insertAt);\n  } else {\n    (document.head || document.body).appendChild(script);\n  }\n  this.script = script;\n\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch (e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function () {\n      if (self.iframe.readyState === 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n","/**\n * Module dependencies.\n */\n\nvar Transport = require('../transport');\nvar parseqs = require('parseqs');\nvar parser = require('engine.io-parser');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = require('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function () {\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function () {\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n","/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar XHR = require('./polling-xhr');\nvar JSONP = require('./polling-jsonp');\nvar websocket = require('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (typeof location !== 'undefined') {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n"],"sourceRoot":""}