{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/src/components/link/link.js","webpack:///./node_modules/bootstrap-vue/src/components/button/button.js"],"names":["propsFactory","href","type","String","default","rel","target","active","Boolean","disabled","to","Object","append","replace","event","Array","activeClass","exact","exactActiveClass","routerTag","noPrefetch","clickHandlerFactory","tag","suppliedHandler","parent","evt","Event","stopPropagation","stopImmediatePropagation","router","__vue__","$emit","array","filter","h","forEach","handler","arguments","$root","preventDefault","link_link","vue_runtime_esm","extend","name","functional","props","[object Object]","data","children","eventType","click","handlers","componentData","lib_esm","class","attrs","tabindex","aria-disabled","NAME","btnProps","block","size","variant","config","pressed","linkProps","linkPropKeys","object","button_props","handleFocus","dom","isLink","toLowerCase","isToggle","isButton","isNonStandardTag","computeClass","btn-block","computeLinkProps","pluck_props","computeAttrs","button","link","toggle","nonStdTag","role","aria-pressed","autocomplete","__webpack_exports__","listeners","on","e","fn","focusin","focusout","staticClass"],"mappings":"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","file":"js/about~3ee20405.ccadd85d.js","sourcesContent":["import Vue from 'vue'\nimport { keys } from '../../utils/object'\nimport { arrayIncludes, concat } from '../../utils/array'\nimport { isRouterLink, computeTag, computeRel, computeHref } from '../../utils/router'\nimport { mergeData } from 'vue-functional-data-merge'\n\n/**\n * The Link component is used in many other BV components.\n * As such, sharing its props makes supporting all its features easier.\n * However, some components need to modify the defaults for their own purpose.\n * Prefer sharing a fresh copy of the props to ensure mutations\n * do not affect other component references to the props.\n *\n * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\n * @return {{}}\n */\nexport function propsFactory() {\n  return {\n    href: {\n      type: String,\n      default: null\n    },\n    rel: {\n      type: String,\n      default: null\n    },\n    target: {\n      type: String,\n      default: '_self'\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // router-link specific props\n    to: {\n      type: [String, Object],\n      default: null\n    },\n    append: {\n      type: Boolean,\n      default: false\n    },\n    replace: {\n      type: Boolean,\n      default: false\n    },\n    event: {\n      type: [String, Array],\n      default: 'click'\n    },\n    activeClass: {\n      type: String\n      // default: undefined\n    },\n    exact: {\n      type: Boolean,\n      default: false\n    },\n    exactActiveClass: {\n      type: String\n      // default: undefined\n    },\n    routerTag: {\n      type: String,\n      default: 'a'\n    },\n    // nuxt-link specific prop(s)\n    noPrefetch: {\n      type: Boolean,\n      default: false\n    }\n  }\n}\n\nexport const props = propsFactory()\n\n// Return a fresh copy of BLink props, containing only the specifeid prop(s)\nexport function pickLinkProps(propsToPick) {\n  const freshLinkProps = propsFactory()\n  // Normalize everything to array.\n  propsToPick = concat(propsToPick)\n\n  return keys(freshLinkProps).reduce((memo, prop) => {\n    if (arrayIncludes(propsToPick, prop)) {\n      memo[prop] = freshLinkProps[prop]\n    }\n\n    return memo\n  }, {})\n}\n\n// Return a fresh copy of BLink props, keeping all but the specified omitting prop(s)\nexport function omitLinkProps(propsToOmit) {\n  const freshLinkProps = propsFactory()\n  // Normalize everything to array.\n  propsToOmit = concat(propsToOmit)\n\n  return keys(props).reduce((memo, prop) => {\n    if (!arrayIncludes(propsToOmit, prop)) {\n      memo[prop] = freshLinkProps[prop]\n    }\n\n    return memo\n  }, {})\n}\n\nfunction clickHandlerFactory({ disabled, tag, href, suppliedHandler, parent }) {\n  return function onClick(evt) {\n    if (disabled && evt instanceof Event) {\n      // Stop event from bubbling up.\n      evt.stopPropagation()\n      // Kill the event loop attached to this specific EventTarget.\n      // Needed to prevent vue-router for doing its thing\n      evt.stopImmediatePropagation()\n    } else {\n      if (isRouterLink(tag) && evt.target.__vue__) {\n        // Router links do not emit instance 'click' events, so we\n        // add in an $emit('click', evt) on it's vue instance\n        /* istanbul ignore next: difficult to test, but we know it works */\n        evt.target.__vue__.$emit('click', evt)\n      }\n      // Call the suppliedHanlder(s), if any provided\n      concat(suppliedHandler)\n        .filter(h => typeof h === 'function')\n        .forEach(handler => {\n          handler(...arguments)\n        })\n      parent.$root.$emit('clicked::link', evt)\n    }\n\n    if ((!isRouterLink(tag) && href === '#') || disabled) {\n      // Stop scroll-to-top behavior or navigation on regular links\n      // when href is just '#'\n      evt.preventDefault()\n    }\n  }\n}\n\n// @vue/component\nexport default Vue.extend({\n  name: 'BLink',\n  functional: true,\n  props: propsFactory(),\n  render(h, { props, data, parent, children }) {\n    const tag = computeTag(props, parent)\n    const rel = computeRel(props)\n    const href = computeHref(props, tag)\n    const eventType = isRouterLink(tag) ? 'nativeOn' : 'on'\n    const suppliedHandler = (data[eventType] || {}).click\n    const handlers = {\n      click: clickHandlerFactory({ tag, href, disabled: props.disabled, suppliedHandler, parent })\n    }\n\n    const componentData = mergeData(data, {\n      class: { active: props.active, disabled: props.disabled },\n      attrs: {\n        rel,\n        target: props.target,\n        tabindex: props.disabled ? '-1' : data.attrs ? data.attrs.tabindex : null,\n        'aria-disabled': props.disabled ? 'true' : null\n      },\n      props: { ...props, tag: props.routerTag }\n    })\n\n    // If href attribute exists on router-link (even undefined or null) it fails working on SSR\n    // So we explicitly add it here if needed (i.e. if computeHref() is truthy)\n    if (href) {\n      componentData.attrs.href = href\n    }\n\n    // We want to overwrite any click handler since our callback\n    // will invoke the user supplied handler if !props.disabled\n    componentData[eventType] = { ...(componentData[eventType] || {}), ...handlers }\n\n    return h(tag, componentData, children)\n  }\n})\n","import Vue from 'vue'\nimport { mergeData } from 'vue-functional-data-merge'\nimport { getComponentConfig } from '../../utils/config'\nimport pluckProps from '../../utils/pluck-props'\nimport { concat } from '../../utils/array'\nimport { keys } from '../../utils/object'\nimport { addClass, removeClass } from '../../utils/dom'\nimport BLink, { propsFactory as linkPropsFactory } from '../link/link'\n\nconst NAME = 'BButton'\n\nconst btnProps = {\n  block: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: () => String(getComponentConfig(NAME, 'variant'))\n  },\n  type: {\n    type: String,\n    default: 'button'\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  pressed: {\n    // tri-state prop: true, false or null\n    // => on, off, not a toggle\n    type: Boolean,\n    default: null\n  }\n}\n\nlet linkProps = linkPropsFactory()\ndelete linkProps.href.default\ndelete linkProps.to.default\nconst linkPropKeys = keys(linkProps)\n\nexport const props = { ...linkProps, ...btnProps }\n\n// Focus handler for toggle buttons.  Needs class of 'focus' when focused.\nfunction handleFocus(evt) {\n  if (evt.type === 'focusin') {\n    addClass(evt.target, 'focus')\n  } else if (evt.type === 'focusout') {\n    removeClass(evt.target, 'focus')\n  }\n}\n\n// Helper functons to minimize runtime memory footprint when lots of buttons on page\n\n// Is the requested button a link?\nfunction isLink(props) {\n  // If tag prop is set to `a`, we use a b-link to get proper disabled handling\n  return Boolean(props.href || props.to || (props.tag && String(props.tag).toLowerCase() === 'a'))\n}\n\n// Is the button to be a toggle button?\nfunction isToggle(props) {\n  return typeof props.pressed === 'boolean'\n}\n\n// Is the button \"really\" a button?\nfunction isButton(props) {\n  if (isLink(props)) {\n    return false\n  } else if (props.tag && String(props.tag).toLowerCase() !== 'button') {\n    return false\n  }\n  return true\n}\n\n// Is the requested tag not a button or link?\nfunction isNonStandardTag(props) {\n  return !isLink(props) && !isButton(props)\n}\n\n// Compute required classes (non static classes)\nfunction computeClass(props) {\n  return [\n    `btn-${props.variant || getComponentConfig(NAME, 'variant')}`,\n    {\n      [`btn-${props.size}`]: Boolean(props.size),\n      'btn-block': props.block,\n      disabled: props.disabled,\n      active: props.pressed\n    }\n  ]\n}\n\n// Compute the link props to pass to b-link (if required)\nfunction computeLinkProps(props) {\n  return isLink(props) ? pluckProps(linkPropKeys, props) : null\n}\n\n// Compute the attributes for a button\nfunction computeAttrs(props, data) {\n  const button = isButton(props)\n  const link = isLink(props)\n  const toggle = isToggle(props)\n  const nonStdTag = isNonStandardTag(props)\n  const role = data.attrs && data.attrs['role'] ? data.attrs['role'] : null\n  let tabindex = data.attrs ? data.attrs['tabindex'] : null\n  if (nonStdTag) {\n    tabindex = '0'\n  }\n  return {\n    // Type only used for \"real\" buttons\n    type: button && !link ? props.type : null,\n    // Disabled only set on \"real\" buttons\n    disabled: button ? props.disabled : null,\n    // We add a role of button when the tag is not a link or button for ARIA.\n    // Don't bork any role provided in data.attrs when isLink or isButton\n    role: nonStdTag ? 'button' : role,\n    // We set the aria-disabled state for non-standard tags\n    'aria-disabled': nonStdTag ? String(props.disabled) : null,\n    // For toggles, we need to set the pressed state for ARIA\n    'aria-pressed': toggle ? String(props.pressed) : null,\n    // autocomplete off is needed in toggle mode to prevent some browsers from\n    // remembering the previous setting when using the back button.\n    autocomplete: toggle ? 'off' : null,\n    // Tab index is used when the component is not a button.\n    // Links are tabbable, but don't allow disabled, while non buttons or links\n    // are not tabbable, so we mimic that functionality by disabling tabbing\n    // when disabled, and adding a tabindex of '0' to non buttons or non links.\n    tabindex: props.disabled && !button ? '-1' : tabindex\n  }\n}\n\n// @vue/component\nexport default Vue.extend({\n  name: NAME,\n  functional: true,\n  props,\n  render(h, { props, data, listeners, children }) {\n    const toggle = isToggle(props)\n    const link = isLink(props)\n    const on = {\n      click(e) {\n        /* istanbul ignore if: blink/button disabled should handle this */\n        if (props.disabled && e instanceof Event) {\n          e.stopPropagation()\n          e.preventDefault()\n        } else if (toggle && listeners && listeners['update:pressed']) {\n          // Send .sync updates to any \"pressed\" prop (if .sync listeners)\n          // Concat will normalize the value to an array\n          // without double wrapping an array value in an array.\n          concat(listeners['update:pressed']).forEach(fn => {\n            if (typeof fn === 'function') {\n              fn(!props.pressed)\n            }\n          })\n        }\n      }\n    }\n\n    if (toggle) {\n      on.focusin = handleFocus\n      on.focusout = handleFocus\n    }\n\n    const componentData = {\n      staticClass: 'btn',\n      class: computeClass(props),\n      props: computeLinkProps(props),\n      attrs: computeAttrs(props, data),\n      on\n    }\n\n    return h(link ? BLink : props.tag, mergeData(data, componentData), children)\n  }\n})\n"],"sourceRoot":""}