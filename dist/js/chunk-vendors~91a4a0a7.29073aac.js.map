{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/mixins/normalize-slot.js","webpack:///./node_modules/bootstrap-vue/es/mixins/listen-on-root.js"],"names":["exports","__esModule","default","_normalizeSlot2","_interopRequireDefault","__webpack_require__","_array","obj","_default","methods","hasNormalizedSlot","name","Boolean","this","$scopedSlots","$slots","normalizeSlot","scope","arguments","length","undefined","vNodes","concat","listenOnRoot","event","callback","_this","$root","$on","$off","listenOnRootOnce","_this2","$once","emitOnRoot","_this$$root","_len","args","Array","_key","$emit","apply"],"mappings":"0HAEAA,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAAC,EAAAC,EAA6CC,EAAQ,SAErDC,EAAaD,EAAQ,QAErB,SAAAD,EAAAG,GAAsC,OAAAA,KAAAN,WAAAM,EAAA,CAAuCL,QAAAK,GAE7E,IAAAC,EAAA,CACAC,QAAA,CACAC,kBAAA,SAAAC,GAEA,OAAAC,QAAAC,KAAAC,aAAAH,IAAAE,KAAAE,OAAAJ,KAEAK,cAAA,SAAAL,GACA,IAAAM,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MAGAG,GAAA,EAAAlB,EAAAD,SAAAS,EAAAM,EAAAJ,KAAAC,aAAAD,KAAAE,QACA,OAAAM,GAAA,EAAAf,EAAAgB,QAAAD,QAIArB,EAAAE,QAAAM,qCCxBAR,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAOA,IAAAM,EAAA,CACAC,QAAA,CAgBAc,aAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAb,KAOA,OALAA,KAAAc,MAAAC,IAAAJ,EAAAC,GACAZ,KAAAe,IAAA,gCACAF,EAAAC,MAAAE,KAAAL,EAAAC,KAGAZ,MAkBAiB,iBAAA,SAAAN,EAAAC,GACA,IAAAM,EAAAlB,KAOA,OALAA,KAAAc,MAAAK,MAAAR,EAAAC,GACAZ,KAAAe,IAAA,gCACAG,EAAAJ,MAAAE,KAAAL,EAAAC,KAGAZ,MASAoB,WAAA,SAAAT,GAGA,IAFA,IAAAU,EAEAC,EAAAjB,UAAAC,OAAAiB,EAAA,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAA4FA,EAAAH,EAAaG,IACzGF,EAAAE,EAAA,GAAApB,UAAAoB,GAMA,OAHAJ,EAAArB,KAAAc,OAAAY,MAAAC,MAAAN,EAAA,CAAAV,GAAAF,OAAAc,IAGAvB,QAIAb,EAAAE,QAAAM","file":"js/chunk-vendors~91a4a0a7.29073aac.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _normalizeSlot2 = _interopRequireDefault(require(\"../utils/normalize-slot\"));\n\nvar _array = require(\"../utils/array\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  methods: {\n    hasNormalizedSlot: function hasNormalizedSlot(name) {\n      // Returns true if the either a $scopedSlot or $slot exists with the specified name\n      return Boolean(this.$scopedSlots[name] || this.$slots[name]);\n    },\n    normalizeSlot: function normalizeSlot(name) {\n      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Returns an array of rendered vNodes if slot found.\n      // Returns undefined if not found.\n      var vNodes = (0, _normalizeSlot2.default)(name, scope, this.$scopedSlots, this.$slots);\n      return vNodes ? (0, _array.concat)(vNodes) : vNodes;\n    }\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n// @vue/component\nvar _default = {\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n\n      this.$root.$on(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Safely register a $once event listener on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      this.$root.$once(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this2.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Convenience method for calling vm.$emit on vm.$root.\n     * @param {string} event\n     * @param {*} args\n     * @chainable\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args)); // Return this for easy chaining\n\n\n      return this;\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}