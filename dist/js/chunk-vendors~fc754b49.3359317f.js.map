{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/utils/copy-props.js","webpack:///./node_modules/bootstrap-vue/es/utils/config.js","webpack:///./node_modules/bootstrap-vue/es/utils/clone-deep.js"],"names":["exports","__esModule","default","_array","__webpack_require__","_object","_identity","_interopRequireDefault","obj","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","copyProps","props","transformFn","undefined","isArray","map","copied","prop","hasOwnProperty","isObject","_default","getBreakpointsDown","getBreakpointsUp","getBreakpoints","getComponentConfig","getConfigValue","getDefaults","getConfig","resetConfig","setConfig","_cloneDeep","_get","_warn","DEFAULTS","breakpoints","BAlert","dismissLabel","variant","BBadge","BButton","BButtonClose","textVariant","ariaLabel","BCardSubTitle","subTitleTextVariant","BCarousel","labelPrev","labelNext","labelGotoSlide","labelIndicators","BDropdown","toggleText","BFormFile","browseText","placeholder","dropPlaceholder","BFormText","BImg","blankColor","BImgLazy","BModal","cancelTitle","cancelVariant","okTitle","okVariant","headerCloseLabel","BNavbarToggle","label","CONFIG","config","cmpName","cmpConfig","some","b","cloneDeep","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","prototype","toString","call","Array","from","arr2","defaultValue","reduce","result","val","isPlainObject"],"mappings":"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","file":"js/chunk-vendors~fc754b49.3359317f.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _array = require(\"./array\");\n\nvar _object = require(\"./object\");\n\nvar _identity = _interopRequireDefault(require(\"./identity\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copies props from one array/object to a new array/object. Prop values\n * are also cloned as new references to prevent possible mutation of original\n * prop object values. Optionally accepts a function to transform the prop name.\n *\n * @param {[]|{}} props\n * @param {Function} transformFn\n */\nvar copyProps = function copyProps(props) {\n  var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _identity.default;\n\n  if ((0, _array.isArray)(props)) {\n    return props.map(transformFn);\n  } // Props as an object.\n\n\n  var copied = {};\n\n  for (var prop in props) {\n    /* istanbul ignore else */\n    if (props.hasOwnProperty(prop)) {\n      // If the prop value is an object, do a shallow clone to prevent\n      // potential mutations to the original object.\n      copied[transformFn(prop)] = (0, _object.isObject)(props[prop]) ? _objectSpread({}, props[prop]) : props[prop];\n    }\n  }\n\n  return copied;\n};\n\nvar _default = copyProps;\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.getBreakpointsDown = exports.getBreakpointsUp = exports.getBreakpoints = exports.getComponentConfig = exports.getConfigValue = exports.getDefaults = exports.getConfig = exports.resetConfig = exports.setConfig = void 0;\n\nvar _cloneDeep = _interopRequireDefault(require(\"./clone-deep\"));\n\nvar _get = _interopRequireDefault(require(\"./get\"));\n\nvar _warn = _interopRequireDefault(require(\"./warn\"));\n\nvar _array = require(\"./array\");\n\nvar _object = require(\"./object\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// General Bootstrap Vue configuration\n//\n// BREAKPOINT DEFINITIONS\n//\n// Some components (BCol and BFormGroup) generate props based on breakpoints, and this\n// occurs when the component is first loaded (evaluated), which may happen before the\n// config is created/modified\n//\n// To get around this we make these components async (lazy evaluation)\n// The component definition is only called/executed when the first access to the\n// component is used (and cached on subsequent uses)\n//\n// See: https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components\n//\n// PROP DEFAULTS\n//\n// For default values on props, we use the default value factory function approach so\n// so that the default values are pulled in at each component instantiation\n//\n//  props: {\n//    variant: {\n//      type: String,\n//      default: () => getConfigComponent('BAlert', 'variant')\n//    }\n//  }\n// prettier-ignore\nvar DEFAULTS = {\n  // Breakpoints\n  breakpoints: ['xs', 'sm', 'md', 'lg', 'xl'],\n  // Component Specific defaults are keyed by the component\n  // name (PascalCase) and prop name (camelCase)\n  BAlert: {\n    dismissLabel: 'Close',\n    variant: 'info'\n  },\n  BBadge: {\n    variant: 'secondary'\n  },\n  BButton: {\n    variant: 'secondary'\n  },\n  BButtonClose: {\n    // `textVariant` is `null` to inherit the current text color\n    textVariant: null,\n    ariaLabel: 'Close'\n  },\n  BCardSubTitle: {\n    // BCard and BCardBody also inherit this prop\n    subTitleTextVariant: 'muted'\n  },\n  BCarousel: {\n    labelPrev: 'Previous Slide',\n    labelNext: 'Next Slide',\n    labelGotoSlide: 'Goto Slide',\n    labelIndicators: 'Select a slide to display'\n  },\n  BDropdown: {\n    toggleText: 'Toggle Dropdown',\n    variant: 'secondary'\n  },\n  BFormFile: {\n    browseText: 'Browse',\n    // Chrome default file prompt\n    placeholder: 'No file chosen',\n    dropPlaceholder: 'Drop files here'\n  },\n  BFormText: {\n    textVariant: 'muted'\n  },\n  BImg: {\n    blankColor: 'transparent'\n  },\n  BImgLazy: {\n    blankColor: 'transparent'\n  },\n  BModal: {\n    cancelTitle: 'Cancel',\n    cancelVariant: 'secondary',\n    okTitle: 'OK',\n    okVariant: 'primary',\n    headerCloseLabel: 'Close'\n  },\n  BNavbarToggle: {\n    label: 'Toggle navigation'\n  } // This contains user defined configuration\n\n};\nvar CONFIG = {}; // Method to get a deep clone (immutable) copy of the defaults\n\nvar getDefaults = function getDefaults() {\n  return (0, _cloneDeep.default)(DEFAULTS);\n}; // Method to set the config\n// Merges in only known top-level and sub-level keys\n//   Vue.use(BootstrapVue, config)\n// or\n//   BootstrapVue.setConfig(config)\n//   Vue.use(BootstrapVue)\n\n\nexports.getDefaults = getDefaults;\n\nvar setConfig = function setConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _object.isObject)(config)) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  (0, _object.keys)(config).filter(function (cmpName) {\n    return config.hasOwnProperty(cmpName);\n  }).forEach(function (cmpName) {\n    if (!DEFAULTS.hasOwnProperty(cmpName)) {\n      /* istanbul ignore next */\n      (0, _warn.default)(\"config: unknown config property \\\"\".concat(cmpName, \"\\\"\"));\n      /* istanbul ignore next */\n\n      return;\n    }\n\n    var cmpConfig = config[cmpName];\n\n    if (cmpName === 'breakpoints') {\n      // Special case for breakpoints\n      var breakpoints = config.breakpoints;\n\n      if (!(0, _array.isArray)(breakpoints) || breakpoints.length < 2 || breakpoints.some(function (b) {\n        return typeof b !== 'string' || b.length === 0;\n      })) {\n        /* istanbul ignore next */\n        (0, _warn.default)('config: \"breakpoints\" must be an array of at least 2 breakpoint names');\n      } else {\n        CONFIG.breakpoints = (0, _cloneDeep.default)(breakpoints);\n      }\n    } else if ((0, _object.isObject)(cmpConfig)) {\n      (0, _object.keys)(cmpConfig).filter(function (key) {\n        return cmpConfig.hasOwnProperty(key);\n      }).forEach(function (key) {\n        if (!DEFAULTS[cmpName].hasOwnProperty(key)) {\n          /* istanbul ignore next */\n          (0, _warn.default)(\"config: unknown config property \\\"\".concat(cmpName, \".{$key}\\\"\"));\n        } else {\n          // If we pre-populate the config with defaults, we can skip this line\n          CONFIG[cmpName] = CONFIG[cmpName] || {};\n\n          if (cmpConfig[key] !== undefined) {\n            CONFIG[cmpName][key] = (0, _cloneDeep.default)(cmpConfig[key]);\n          }\n        }\n      });\n    }\n  });\n}; // Reset the user config to default\n// For testing purposes only\n\n\nexports.setConfig = setConfig;\n\nvar resetConfig = function resetConfig() {\n  CONFIG = {};\n}; // Get the current user config\n// For testing purposes only\n\n\nexports.resetConfig = resetConfig;\n\nvar getConfig = function getConfig() {\n  return (0, _cloneDeep.default)(CONFIG);\n}; // Method to grab a config value based on a dotted/array notation key\n// Returns a deep clone (immutable) copy\n\n\nexports.getConfig = getConfig;\n\nvar getConfigValue = function getConfigValue(key) {\n  // First we try the user config, and if key not found we fall back to default value\n  // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n  return (0, _cloneDeep.default)((0, _get.default)(CONFIG, key, (0, _get.default)(getDefaults(), key)));\n}; // Method to grab a config value for a particular component.\n// Returns a deep clone (immutable) copy\n\n\nexports.getConfigValue = getConfigValue;\n\nvar getComponentConfig = function getComponentConfig(cmpName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Return the particular config value for key for if specified,\n  // otherwise we return the full config\n  return key ? getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : getConfigValue(cmpName) || {};\n}; // Convenience method for getting all breakpoint names\n\n\nexports.getComponentConfig = getComponentConfig;\n\nvar getBreakpoints = function getBreakpoints() {\n  return getConfigValue('breakpoints');\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n\n\nexports.getBreakpoints = getBreakpoints;\n\nvar getBreakpointsUp = function getBreakpointsUp() {\n  var breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n\n\nexports.getBreakpointsUp = getBreakpointsUp;\n\nvar getBreakpointsDown = function getBreakpointsDown() {\n  var breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Named Exports\n\n\nexports.getBreakpointsDown = getBreakpointsDown;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = exports.cloneDeep = void 0;\n\nvar _array = require(\"./array\");\n\nvar _object = require(\"./object\");\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar cloneDeep = function cloneDeep(obj) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : obj;\n\n  if ((0, _array.isArray)(obj)) {\n    return obj.reduce(function (result, val) {\n      return [].concat(_toConsumableArray(result), [cloneDeep(val, val)]);\n    }, []);\n  }\n\n  if ((0, _object.isPlainObject)(obj)) {\n    return (0, _object.keys)(obj).reduce(function (result, key) {\n      return _objectSpread({}, result, _defineProperty({}, key, cloneDeep(obj[key], obj[key])));\n    }, {});\n  }\n\n  return defaultValue;\n};\n\nexports.cloneDeep = cloneDeep;\nvar _default = cloneDeep;\nexports.default = _default;"],"sourceRoot":""}