{"version":3,"sources":["webpack:///./src/node_modules/component-inherit/index.js","webpack:///./src/node_modules/component-emitter/index.js","webpack:///./src/node_modules/component-bind/index.js"],"names":["module","exports","a","b","fn","prototype","constructor","Emitter","obj","mixin","key","on","addEventListener","event","this","_callbacks","push","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","cb","callbacks","i","splice","emit","args","slice","call","len","listeners","hasListeners","Error","concat"],"mappings":"2GACAA,EAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,aACAA,EAAAC,UAAAF,EAAAE,UACAH,EAAAG,UAAA,IAAAD,EACAF,EAAAG,UAAAC,YAAAJ,yBCUA,SAAAK,EAAAC,GACA,GAAAA,EAAA,OAAAC,EAAAD,GAWA,SAAAC,EAAAD,GACA,QAAAE,KAAAH,EAAAF,UACAG,EAAAE,GAAAH,EAAAF,UAAAK,GAEA,OAAAF,EAzBAR,EAAAC,QAAAM,EAqCAA,EAAAF,UAAAM,GACAJ,EAAAF,UAAAO,iBAAA,SAAAC,EAAAT,GAIA,OAHAU,KAAAC,WAAAD,KAAAC,YAAA,IACAD,KAAAC,WAAA,IAAAF,GAAAC,KAAAC,WAAA,IAAAF,IAAA,IACAG,KAAAZ,GACAU,MAaAP,EAAAF,UAAAY,KAAA,SAAAJ,EAAAT,GACA,SAAAO,IACAG,KAAAI,IAAAL,EAAAF,GACAP,EAAAe,MAAAL,KAAAM,WAKA,OAFAT,EAAAP,KACAU,KAAAH,GAAAE,EAAAF,GACAG,MAaAP,EAAAF,UAAAa,IACAX,EAAAF,UAAAgB,eACAd,EAAAF,UAAAiB,mBACAf,EAAAF,UAAAkB,oBAAA,SAAAV,EAAAT,GAIA,GAHAU,KAAAC,WAAAD,KAAAC,YAAA,GAGA,GAAAK,UAAAI,OAEA,OADAV,KAAAC,WAAA,GACAD,KAIA,IAUAW,EAVAC,EAAAZ,KAAAC,WAAA,IAAAF,GACA,IAAAa,EAAA,OAAAZ,KAGA,MAAAM,UAAAI,OAEA,cADAV,KAAAC,WAAA,IAAAF,GACAC,KAKA,QAAAa,EAAA,EAAiBA,EAAAD,EAAAF,OAAsBG,IAEvC,GADAF,EAAAC,EAAAC,GACAF,IAAArB,GAAAqB,EAAArB,OAAA,CACAsB,EAAAE,OAAAD,EAAA,GACA,MAGA,OAAAb,MAWAP,EAAAF,UAAAwB,KAAA,SAAAhB,GACAC,KAAAC,WAAAD,KAAAC,YAAA,GACA,IAAAe,EAAA,GAAAC,MAAAC,KAAAZ,UAAA,GACAM,EAAAZ,KAAAC,WAAA,IAAAF,GAEA,GAAAa,EAAA,CACAA,IAAAK,MAAA,GACA,QAAAJ,EAAA,EAAAM,EAAAP,EAAAF,OAA2CG,EAAAM,IAASN,EACpDD,EAAAC,GAAAR,MAAAL,KAAAgB,GAIA,OAAAhB,MAWAP,EAAAF,UAAA6B,UAAA,SAAArB,GAEA,OADAC,KAAAC,WAAAD,KAAAC,YAAA,GACAD,KAAAC,WAAA,IAAAF,IAAA,IAWAN,EAAAF,UAAA8B,aAAA,SAAAtB,GACA,QAAAC,KAAAoB,UAAArB,GAAAW,4BC7JA,IAAAO,EAAA,GAAAA,MAWA/B,EAAAC,QAAA,SAAAO,EAAAJ,GAEA,GADA,iBAAAA,MAAAI,EAAAJ,IACA,mBAAAA,EAAA,UAAAgC,MAAA,8BACA,IAAAN,EAAAC,EAAAC,KAAAZ,UAAA,GACA,kBACA,OAAAhB,EAAAe,MAAAX,EAAAsB,EAAAO,OAAAN,EAAAC,KAAAZ","file":"js/chunk-vendors~be7d4c50.74bc57f2.js","sourcesContent":["\nmodule.exports = function(a, b){\n  var fn = function(){};\n  fn.prototype = b.prototype;\n  a.prototype = new fn;\n  a.prototype.constructor = a;\n};","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","/**\n * Slice reference.\n */\n\nvar slice = [].slice;\n\n/**\n * Bind `obj` to `fn`.\n *\n * @param {Object} obj\n * @param {Function|String} fn or string\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(obj, fn){\n  if ('string' == typeof fn) fn = obj[fn];\n  if ('function' != typeof fn) throw new Error('bind() requires a function');\n  var args = slice.call(arguments, 2);\n  return function(){\n    return fn.apply(obj, args.concat(slice.call(arguments)));\n  }\n};\n"],"sourceRoot":""}