{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.js","webpack:///./node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.class.js"],"names":["exports","__esModule","default","_scrollspy","_interopRequireDefault","__webpack_require__","_env","_object","obj","_typeof","Symbol","iterator","constructor","prototype","BV_SCROLLSPY","parseBindings","bindings","config","arg","element","concat","keys","modifiers","forEach","mod","test","offset","parseInt","method","value","Math","round","filter","k","Boolean","DefaultType","applyScrollspy","el","vnode","inBrowser","updateConfig","context","$root","removeScrollspy","dispose","_default","bind","inserted","update","oldValue","componentUpdated","unbind","_observeDom","_warn","_dom","_objectSpread","target","i","arguments","length","source","ownKeys","Object","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","enumerable","key","_defineProperty","defineProperty","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","NAME","ACTIVATE_EVENT","Default","throttle","ClassName","DROPDOWN_ITEM","ACTIVE","Selector","NAV_LIST_GROUP","NAV_LINKS","NAV_ITEMS","LIST_ITEMS","DROPDOWN","DROPDOWN_ITEMS","DROPDOWN_TOGGLE","OffsetMethod","OFFSET","POSITION","HREF_REGEX","TransitionEndEvents","EventOptions","passive","capture","toType","toString","call","match","toLowerCase","typeCheckConfig","componentName","configTypes","property","hasOwnProperty","expectedTypes","valueType","isElement","_isVue","RegExp","ScrollSpy","this","$el","$scroller","$selector","join","$offsets","$targets","$activeTarget","$scrollHeight","$resizeTimeout","$obs_scroller","$obs_targets","$config","unlisten","cfg","Name","self","$nextTick","listen","clearTimeout","_this","scroller","getScroller","tagName","eventOn","window","evtName","setObservers","handleEvent","_this2","eventOff","on","_this3","disconnect","subtree","childList","attributes","attributeFilter","characterData","evt","type","resizeThrottle","setTimeout","refresh","process","_this4","autoMethod","methodFn","position","offsetBase","getScrollTop","getScrollHeight","selectAll","map","link","getAttr","href","id","replace","trim","select","isVisible","top","sort","a","b","reduce","memo","item","push","scrollTop","scrollHeight","maxScroll","getOffsetHeight","activate","clear","isActiveTarget","pageYOffset","max","document","body","documentElement","innerHeight","getBCR","height","_this5","links","split","selector","hasClass","dropdown","closest","setActiveState","matches","parentElement","sibling","previousElementSibling","$emit","_this6","active","addClass","removeClass","get"],"mappings":"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","file":"js/chunk-vendors~e34125d1.6de0f3ee.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _scrollspy = _interopRequireDefault(require(\"./scrollspy.class\"));\n\nvar _env = require(\"../../utils/env\");\n\nvar _object = require(\"../../utils/object\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Key we use to store our instance\nvar BV_SCROLLSPY = '__BV_ScrollSpy__'; // Build a ScrollSpy config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  var config = {}; // If argument, assume element ID\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.element = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  (0, _object.keys)(bindings.modifiers).forEach(function (mod) {\n    if (/^\\d+$/.test(mod)) {\n      // Offset value\n      config.offset = parseInt(mod, 10);\n    } else if (/^(auto|position|offset)$/.test(mod)) {\n      // Offset method\n      config.method = mod;\n    }\n  }); // Process value\n\n  if (typeof bindings.value === 'string') {\n    // Value is a CSS ID or selector\n    config.element = bindings.value;\n  } else if (typeof bindings.value === 'number') {\n    // Value is offset\n    config.offset = Math.round(bindings.value);\n  } else if (_typeof(bindings.value) === 'object') {\n    // Value is config object\n    // Filter the object based on our supported config options\n    (0, _object.keys)(bindings.value).filter(function (k) {\n      return Boolean(_scrollspy.default.DefaultType[k]);\n    }).forEach(function (k) {\n      config[k] = bindings.value[k];\n    });\n  }\n\n  return config;\n}; // Add or update ScrollSpy on our element\n\n\nvar applyScrollspy = function applyScrollspy(el, bindings, vnode)\n/* istanbul ignore next: not easy to test */\n{\n  if (!_env.inBrowser) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  var config = parseBindings(bindings);\n\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n  } else {\n    el[BV_SCROLLSPY] = new _scrollspy.default(el, config, vnode.context.$root);\n  }\n}; // Remove ScrollSpy on our element\n\n/* istanbul ignore next: not easy to test */\n\n\nvar removeScrollspy = function removeScrollspy(el)\n/* istanbul ignore next: not easy to test */\n{\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].dispose();\n    el[BV_SCROLLSPY] = null;\n    delete el[BV_SCROLLSPY];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar _default = {\n  bind: function bind(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    applyScrollspy(el, bindings, vnode);\n  },\n  inserted: function inserted(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    applyScrollspy(el, bindings, vnode);\n  },\n  update: function update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n  componentUpdated: function componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n  unbind: function unbind(el)\n  /* istanbul ignore next: not easy to test */\n  {\n    removeScrollspy(el);\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _observeDom = _interopRequireDefault(require(\"../../utils/observe-dom\"));\n\nvar _warn = _interopRequireDefault(require(\"../../utils/warn\"));\n\nvar _dom = require(\"../../utils/dom\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Constants / Defaults\n */\nvar NAME = 'v-b-scrollspy';\nvar ACTIVATE_EVENT = 'bv::scrollspy::activate';\nvar Default = {\n  element: 'body',\n  offset: 10,\n  method: 'auto',\n  throttle: 75\n};\nvar DefaultType = {\n  element: '(string|element|component)',\n  offset: 'number',\n  method: 'string',\n  throttle: 'number'\n};\nvar ClassName = {\n  DROPDOWN_ITEM: 'dropdown-item',\n  ACTIVE: 'active'\n};\nvar Selector = {\n  ACTIVE: '.active',\n  NAV_LIST_GROUP: '.nav, .list-group',\n  NAV_LINKS: '.nav-link',\n  NAV_ITEMS: '.nav-item',\n  LIST_ITEMS: '.list-group-item',\n  DROPDOWN: '.dropdown, .dropup',\n  DROPDOWN_ITEMS: '.dropdown-item',\n  DROPDOWN_TOGGLE: '.dropdown-toggle'\n};\nvar OffsetMethod = {\n  OFFSET: 'offset',\n  POSITION: 'position' // HREFs must end with a hash followed by at least one non-hash character.\n  // HREFs in the links are assumed to point to non-external links.\n  // Comparison to the current page base URL is not performed!\n\n};\nvar HREF_REGEX = /^.*(#[^#]+)$/; // Transition Events\n\nvar TransitionEndEvents = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd']; // Options for events\n\nvar EventOptions = {\n  passive: true,\n  capture: false\n  /*\n   * Utility Methods\n   */\n  // Better var type detection\n\n};\n\nfunction toType(obj)\n/* istanbul ignore next: not easy to test */\n{\n  return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n} // Check config properties for expected types\n\n\nfunction typeCheckConfig(componentName, config, configTypes)\n/* istanbul ignore next: not easy to test */\n{\n  for (var property in configTypes) {\n    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n      var expectedTypes = configTypes[property];\n      var value = config[property];\n      var valueType = value && (0, _dom.isElement)(value) ? 'element' : toType(value); // handle Vue instances\n\n      valueType = value && value._isVue ? 'component' : valueType;\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        /* istanbul ignore next */\n        (0, _warn.default)(\"\".concat(componentName, \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\"\"));\n      }\n    }\n  }\n}\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\n/* istanbul ignore next: not easy to test */\n\n\nvar ScrollSpy\n/* istanbul ignore next: not easy to test */\n=\n/*#__PURE__*/\nfunction () {\n  function ScrollSpy(element, config, $root) {\n    _classCallCheck(this, ScrollSpy);\n\n    // The element we activate links in\n    this.$el = element;\n    this.$scroller = null;\n    this.$selector = [Selector.NAV_LINKS, Selector.LIST_ITEMS, Selector.DROPDOWN_ITEMS].join(',');\n    this.$offsets = [];\n    this.$targets = [];\n    this.$activeTarget = null;\n    this.$scrollHeight = 0;\n    this.$resizeTimeout = null;\n    this.$obs_scroller = null;\n    this.$obs_targets = null;\n    this.$root = $root || null;\n    this.$config = null;\n    this.updateConfig(config);\n  }\n\n  _createClass(ScrollSpy, [{\n    key: \"updateConfig\",\n    value: function updateConfig(config, $root) {\n      if (this.$scroller) {\n        // Just in case out scroll element has changed\n        this.unlisten();\n        this.$scroller = null;\n      }\n\n      var cfg = _objectSpread({}, this.constructor.Default, config);\n\n      if ($root) {\n        this.$root = $root;\n      }\n\n      typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\n      this.$config = cfg;\n\n      if (this.$root) {\n        var self = this;\n        this.$root.$nextTick(function () {\n          self.listen();\n        });\n      } else {\n        this.listen();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.unlisten();\n      clearTimeout(this.$resizeTimeout);\n      this.$resizeTimeout = null;\n      this.$el = null;\n      this.$config = null;\n      this.$scroller = null;\n      this.$selector = null;\n      this.$offsets = null;\n      this.$targets = null;\n      this.$activeTarget = null;\n      this.$scrollHeight = null;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      var _this = this;\n\n      var scroller = this.getScroller();\n\n      if (scroller && scroller.tagName !== 'BODY') {\n        (0, _dom.eventOn)(scroller, 'scroll', this, EventOptions);\n      }\n\n      (0, _dom.eventOn)(window, 'scroll', this, EventOptions);\n      (0, _dom.eventOn)(window, 'resize', this, EventOptions);\n      (0, _dom.eventOn)(window, 'orientationchange', this, EventOptions);\n      TransitionEndEvents.forEach(function (evtName) {\n        (0, _dom.eventOn)(window, evtName, _this, EventOptions);\n      });\n      this.setObservers(true); // Scedule a refresh\n\n      this.handleEvent('refresh');\n    }\n  }, {\n    key: \"unlisten\",\n    value: function unlisten() {\n      var _this2 = this;\n\n      var scroller = this.getScroller();\n      this.setObservers(false);\n\n      if (scroller && scroller.tagName !== 'BODY') {\n        (0, _dom.eventOff)(scroller, 'scroll', this, EventOptions);\n      }\n\n      (0, _dom.eventOff)(window, 'scroll', this, EventOptions);\n      (0, _dom.eventOff)(window, 'resize', this, EventOptions);\n      (0, _dom.eventOff)(window, 'orientationchange', this, EventOptions);\n      TransitionEndEvents.forEach(function (evtName) {\n        (0, _dom.eventOff)(window, evtName, _this2, EventOptions);\n      });\n    }\n  }, {\n    key: \"setObservers\",\n    value: function setObservers(on) {\n      var _this3 = this;\n\n      // We observe both the scroller for content changes, and the target links\n      if (this.$obs_scroller) {\n        this.$obs_scroller.disconnect();\n        this.$obs_scroller = null;\n      }\n\n      if (this.$obs_targets) {\n        this.$obs_targets.disconnect();\n        this.$obs_targets = null;\n      }\n\n      if (on) {\n        this.$obs_targets = (0, _observeDom.default)(this.$el, function () {\n          _this3.handleEvent('mutation');\n        }, {\n          subtree: true,\n          childList: true,\n          attributes: true,\n          attributeFilter: ['href']\n        });\n        this.$obs_scroller = (0, _observeDom.default)(this.getScroller(), function () {\n          _this3.handleEvent('mutation');\n        }, {\n          subtree: true,\n          childList: true,\n          characterData: true,\n          attributes: true,\n          attributeFilter: ['id', 'style', 'class']\n        });\n      }\n    } // general event handler\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(evt) {\n      var type = typeof evt === 'string' ? evt : evt.type;\n      var self = this;\n\n      function resizeThrottle() {\n        if (!self.$resizeTimeout) {\n          self.$resizeTimeout = setTimeout(function () {\n            self.refresh();\n            self.process();\n            self.$resizeTimeout = null;\n          }, self.$config.throttle);\n        }\n      }\n\n      if (type === 'scroll') {\n        if (!this.$obs_scroller) {\n          // Just in case we are added to the DOM before the scroll target is\n          // We re-instantiate our listeners, just in case\n          this.listen();\n        }\n\n        this.process();\n      } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\n        // Postpone these events by throttle time\n        resizeThrottle();\n      }\n    } // Refresh the list of target links on the element we are applied to\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this4 = this;\n\n      var scroller = this.getScroller();\n\n      if (!scroller) {\n        return;\n      }\n\n      var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n      var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\n      var methodFn = method === OffsetMethod.POSITION ? _dom.position : _dom.offset;\n      var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\n      this.$offsets = [];\n      this.$targets = [];\n      this.$scrollHeight = this.getScrollHeight(); // Find all the unique link href's that we will control\n\n      (0, _dom.selectAll)(this.$selector, this.$el) // Get HREF value\n      .map(function (link) {\n        return (0, _dom.getAttr)(link, 'href');\n      }) // Filter out HREFs taht do not match our RegExp\n      .filter(function (href) {\n        return href && HREF_REGEX.test(href || '');\n      }) // Find all elements with ID that match HREF hash\n      .map(function (href) {\n        // Convert HREF into an ID (including # at begining)\n        var id = href.replace(HREF_REGEX, '$1').trim();\n\n        if (!id) {\n          return null;\n        } // Find the element with the ID specified by id\n\n\n        var el = (0, _dom.select)(id, scroller);\n\n        if (el && (0, _dom.isVisible)(el)) {\n          return {\n            offset: parseInt(methodFn(el).top, 10) + offsetBase,\n            target: id\n          };\n        }\n\n        return null;\n      }).filter(Boolean) // Sort them by their offsets (smallest first)\n      .sort(function (a, b) {\n        return a.offset - b.offset;\n      }) // record only unique targets/offsets\n      .reduce(function (memo, item) {\n        if (!memo[item.target]) {\n          _this4.$offsets.push(item.offset);\n\n          _this4.$targets.push(item.target);\n\n          memo[item.target] = true;\n        }\n\n        return memo;\n      }, {}); // Return this for easy chaining\n\n      return this;\n    } // Handle activating/clearing\n\n  }, {\n    key: \"process\",\n    value: function process() {\n      var scrollTop = this.getScrollTop() + this.$config.offset;\n      var scrollHeight = this.getScrollHeight();\n      var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\n\n      if (this.$scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        var target = this.$targets[this.$targets.length - 1];\n\n        if (this.$activeTarget !== target) {\n          this.activate(target);\n        }\n\n        return;\n      }\n\n      if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\n        this.$activeTarget = null;\n        this.clear();\n        return;\n      }\n\n      for (var i = this.$offsets.length; i--;) {\n        var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (typeof this.$offsets[i + 1] === 'undefined' || scrollTop < this.$offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this.activate(this.$targets[i]);\n        }\n      }\n    }\n  }, {\n    key: \"getScroller\",\n    value: function getScroller() {\n      if (this.$scroller) {\n        return this.$scroller;\n      }\n\n      var scroller = this.$config.element;\n\n      if (!scroller) {\n        return null;\n      } else if ((0, _dom.isElement)(scroller.$el)) {\n        scroller = scroller.$el;\n      } else if (typeof scroller === 'string') {\n        scroller = (0, _dom.select)(scroller);\n      }\n\n      if (!scroller) {\n        return null;\n      }\n\n      this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\n      return this.$scroller;\n    }\n  }, {\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      var scroller = this.getScroller();\n      return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n  }, {\n    key: \"getOffsetHeight\",\n    value: function getOffsetHeight() {\n      var scroller = this.getScroller();\n      return scroller === window ? window.innerHeight : (0, _dom.getBCR)(scroller).height;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(target) {\n      var _this5 = this;\n\n      this.$activeTarget = target;\n      this.clear(); // Grab the list of target links (<a href=\"{$target}\">)\n\n      var links = (0, _dom.selectAll)(this.$selector // Split out the base selectors\n      .split(',') // Map to a selector that matches links with HREF ending in the ID (including '#')\n      .map(function (selector) {\n        return \"\".concat(selector, \"[href$=\\\"\").concat(target, \"\\\"]\");\n      }) // Join back into a single selector string\n      .join(','), this.$el);\n      links.forEach(function (link) {\n        if ((0, _dom.hasClass)(link, ClassName.DROPDOWN_ITEM)) {\n          // This is a dropdown item, so find the .dropdown-toggle and set it's state\n          var dropdown = (0, _dom.closest)(Selector.DROPDOWN, link);\n\n          if (dropdown) {\n            _this5.setActiveState((0, _dom.select)(Selector.DROPDOWN_TOGGLE, dropdown), true);\n          } // Also set this link's state\n\n\n          _this5.setActiveState(link, true);\n        } else {\n          // Set triggered link as active\n          _this5.setActiveState(link, true);\n\n          if ((0, _dom.matches)(link.parentElement, Selector.NAV_ITEMS)) {\n            // Handle nav-link inside nav-item, and set nav-item active\n            _this5.setActiveState(link.parentElement, true);\n          } // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n\n\n          var el = link;\n\n          while (el) {\n            el = (0, _dom.closest)(Selector.NAV_LIST_GROUP, el);\n            var sibling = el ? el.previousElementSibling : null;\n\n            if (sibling && (0, _dom.matches)(sibling, \"\".concat(Selector.NAV_LINKS, \", \").concat(Selector.LIST_ITEMS))) {\n              _this5.setActiveState(sibling, true);\n            } // Handle special case where nav-link is inside a nav-item\n\n\n            if (sibling && (0, _dom.matches)(sibling, Selector.NAV_ITEMS)) {\n              _this5.setActiveState((0, _dom.select)(Selector.NAV_LINKS, sibling), true); // Add active state to nav-item as well\n\n\n              _this5.setActiveState(sibling, true);\n            }\n          }\n        }\n      }); // Signal event to via $root, passing ID of activaed target and reference to array of links\n\n      if (links && links.length > 0 && this.$root) {\n        this.$root.$emit(ACTIVATE_EVENT, target, links);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this6 = this;\n\n      (0, _dom.selectAll)(\"\".concat(this.$selector, \", \").concat(Selector.NAV_ITEMS), this.$el).filter(function (el) {\n        return (0, _dom.hasClass)(el, ClassName.ACTIVE);\n      }).forEach(function (el) {\n        return _this6.setActiveState(el, false);\n      });\n    }\n  }, {\n    key: \"setActiveState\",\n    value: function setActiveState(el, active) {\n      if (!el) {\n        return;\n      }\n\n      if (active) {\n        (0, _dom.addClass)(el, ClassName.ACTIVE);\n      } else {\n        (0, _dom.removeClass)(el, ClassName.ACTIVE);\n      }\n    }\n  }], [{\n    key: \"Name\",\n    get: function get() {\n      return NAME;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }, {\n    key: \"DefaultType\",\n    get: function get() {\n      return DefaultType;\n    }\n  }]);\n\n  return ScrollSpy;\n}();\n\nvar _default = ScrollSpy;\nexports.default = _default;"],"sourceRoot":""}