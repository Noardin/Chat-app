{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/mixin-selectable.js"],"names":["exports","__esModule","default","_looseEqual","_interopRequireDefault","__webpack_require__","_array","_sanitizeRow","obj","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","_default","props","selectable","type","Boolean","selectMode","String","selectedVariant","data","selectedRows","selectedLastRow","computed","selectableTableClasses","_ref","this","isSelecting","some","b-table-selectable","concat","selectableTableAttrs","aria-multiselectable","selectableIsMultiSelect","arrayIncludes","watch","computedItems","newVal","oldVal","equal","length","isArray","i","clearSelected","setSelectionHandlers","_selectedRows","_this","items","forEach","v","idx","push","$emit","beforeMount","methods","isRowSelected","selectableRowClasses","rowSelected","base","dark","variant","b-table-row-selected","selectableRowAttrs","aria-selected","hasSelection","reduce","prev","selectedLastClicked","on","method","selectionHandler","item","index","evt","slice","selected","mode","shiftKey","Math","min","max","ctrlKey","metaKey"],"mappings":"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","file":"js/chunk-vendors~edc107dc.ee93c18b.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _looseEqual = _interopRequireDefault(require(\"../../../utils/loose-equal\"));\n\nvar _array = require(\"../../../utils/array\");\n\nvar _sanitizeRow = _interopRequireDefault(require(\"./sanitize-row\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _default = {\n  props: {\n    selectable: {\n      type: Boolean,\n      default: false\n    },\n    selectMode: {\n      type: String,\n      default: 'multi'\n    },\n    selectedVariant: {\n      type: String,\n      default: 'primary'\n    }\n  },\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      var selectable = this.selectable;\n      var isSelecting = selectable && this.selectedRows && this.selectedRows.some(Boolean);\n      return _ref = {\n        'b-table-selectable': selectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), selectable), _defineProperty(_ref, 'b-table-selecting', isSelecting), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      return {\n        'aria-multiselectable': this.selectableIsMultiSelect\n      };\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      if (this.selectable) {\n        return (0, _array.arrayIncludes)(['range', 'multi'], this.selectMode) ? 'true' : 'false';\n      } else {\n        return null;\n      }\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newVal, oldVal) {\n      // Reset for selectable\n      // TODO: Should selectedLastClicked be reset here?\n      //       As changes to _showDetails would trigger it to reset\n      this.selectedLastRow = -1;\n      var equal = false;\n\n      if (this.selectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = (0, _array.isArray)(newVal) && (0, _array.isArray)(oldVal) && newVal.length === oldVal.length;\n\n        for (var i = 0; equal && i < newVal.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = (0, _looseEqual.default)((0, _sanitizeRow.default)(newVal[i]), (0, _sanitizeRow.default)(oldVal[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newVal, oldVal) {\n      this.clearSelected();\n      this.setSelectionHandlers(newVal);\n    },\n    selectMode: function selectMode(newVal, oldVal) {\n      this.clearSelected();\n    },\n    selectedRows: function selectedRows(_selectedRows, oldVal) {\n      var _this = this;\n\n      if (this.selectable && !(0, _looseEqual.default)(_selectedRows, oldVal)) {\n        var items = []; // forEach skips over non-existant indicies (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit('row-selected', items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers\n    if (this.selectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    isRowSelected: function isRowSelected(idx) {\n      return Boolean(this.selectedRows[idx]);\n    },\n    selectableRowClasses: function selectableRowClasses(idx) {\n      var rowSelected = this.isRowSelected(idx);\n      var base = this.dark ? 'bg' : 'table';\n      var variant = this.selectedVariant;\n      return _defineProperty({\n        'b-table-row-selected': this.selectable && rowSelected\n      }, \"\".concat(base, \"-\").concat(variant), this.selectable && rowSelected && variant);\n    },\n    selectableRowAttrs: function selectableRowAttrs(idx) {\n      return {\n        'aria-selected': !this.selectable ? null : this.isRowSelected(idx) ? 'true' : 'false'\n      };\n    },\n    clearSelected: function clearSelected() {\n      var hasSelection = this.selectedRows.reduce(function (prev, v) {\n        return prev || v;\n      }, false);\n\n      if (hasSelection) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = [];\n      }\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method]('row-clicked', this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method]('filtered', this.clearSelected);\n      this[method]('context-changed', this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, evt) {\n      /* istanbul ignore if: should never happen */\n      if (!this.selectable) {\n        // Don't do anything if table is not in selectable mode\n\n        /* istanbul ignore next: should never happen */\n        this.clearSelected();\n        /* istanbul ignore next: should never happen */\n\n        return;\n      }\n\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index];\n      var mode = this.selectMode; // Note 'multi' mode needs no special handling\n\n      if (mode === 'single') {\n        selectedRows = [];\n      } else if (mode === 'range') {\n        if (this.selectedLastRow > -1 && evt.shiftKey) {\n          // range\n          for (var idx = Math.min(this.selectedLastRow, index); idx <= Math.max(this.selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(evt.ctrlKey || evt.metaKey)) {\n            // clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          this.selectedLastRow = selected ? index : -1;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}