{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/utils/tooltip.class.js"],"names":["exports","__esModule","default","_popper","_interopRequireDefault","__webpack_require__","_bvEvent","_noop","_array","_dom","obj","_typeof","Symbol","iterator","constructor","prototype","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","NAME","CLASS_PREFIX","BS_CLASS_PREFIX_REGEX","RegExp","TRANSITION_DURATION","MODAL_CLOSE_EVENT","MODAL_CLASS","AttachmentMap","AUTO","TOP","RIGHT","BOTTOM","LEFT","TOPLEFT","TOPRIGHT","RIGHTTOP","RIGHTBOTTOM","BOTTOMLEFT","BOTTOMRIGHT","LEFTTOP","LEFTBOTTOM","OffsetMap","HoverState","SHOW","OUT","ClassName","FADE","Selector","TOOLTIP","TOOLTIP_INNER","ARROW","Defaults","animation","template","trigger","title","delay","html","placement","offset","arrowPadding","container","fallbackPlacement","callbacks","boundary","TransitionEndEvents","WebkitTransition","MozTransition","OTransition","transition","EvtOpts","passive","capture","NEXTID","generateId","name","ToolTip","element","config","$root","this","$isEnabled","$fadeTimeout","$hoverTimeout","$visibleInterval","$hoverState","$activeTrigger","$popper","$element","$tip","$id","$routeWatcher","$forceHide","forceHide","bind","$doHide","doHide","$doShow","doShow","$doDisable","doDisable","$doEnable","doEnable","updateConfig","updatedConfig","Default","show","hide","toString","content","fixTitle","$config","unListen","listen","setWhileOpenListeners","clearTimeout","destroy","parentElement","removeChild","enabledEvt","cancelable","relatedTarget","emitEvent","disabledEvt","event","click","isWithActiveTrigger","enter","leave","hasClass","getTipElement","_this","document","body","contains","isVisible","tip","setContent","isWithContent","setAttr","addAriaDescribedby","addClass","removeClass","getPlacement","attachment","getAttachment","addAttachmentClass","showEvt","defaultPrevented","getContainer","appendChild","removePopper","getPopperConfig","complete","fixTransition","prevHoverState","shownEvt","transitionOnce","on","_this2","clearInterval","setInterval","setModalListener","visibleCheck","setRouteWatcher","setOnTouchStartListener","test","eventOn","eventOff","callback","force","_this3","hideEvt","parentNode","removeAriaDescribedby","hiddenEvt","focus","hover","evt","evtName","type","$emit","closest","select","desc","getAttr","split","join","trim","_this4","d","removeAttr","_this5","transEvents","getTransitionEndEvents","called","fnOnce","setTimeout","undefined","style","scheduleUpdate","Boolean","innerHTML","compileTemplate","tabIndex","div","createElement","node","firstElementChild","setElementContent","getTitle","allowHtml","nodeType","innerText","_this6","triggers","el","setRootListener","_this7","events","e","isDisabled","toggle","_this8","$route","$watch","newVal","oldVal","modal","id","disable","enable","_this9","documentElement","from","children","titleType","_this10","_this11","_this12","modifiers","getOffset","flip","behavior","arrow","preventOverflow","padding","boundaryPadding","boundariesElement","onCreate","data","originalPlacement","handlePopperPlacementChange","onUpdate","arrowOffset","parseFloat","getCS","width","toUpperCase","call","tabClass","className","match","cls","cleanTipClass","initConfigAnimation","get","_default"],"mappings":"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","file":"js/chunk-vendors~ef0539b2.55d370a1.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _popper = _interopRequireDefault(require(\"popper.js\"));\n\nvar _bvEvent = _interopRequireDefault(require(\"./bv-event.class\"));\n\nvar _noop = _interopRequireDefault(require(\"./noop\"));\n\nvar _array = require(\"./array\");\n\nvar _dom = require(\"./dom\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NAME = 'tooltip';\nvar CLASS_PREFIX = 'bs-tooltip';\nvar BS_CLASS_PREFIX_REGEX = new RegExp(\"\\\\b\".concat(CLASS_PREFIX, \"\\\\S+\"), 'g');\nvar TRANSITION_DURATION = 150; // Modal $root hidden event\n\nvar MODAL_CLOSE_EVENT = 'bv::modal::hidden'; // Modal container for appending tooltip/popover\n\nvar MODAL_CLASS = '.modal-content';\nvar AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: 'right',\n  BOTTOM: 'bottom',\n  LEFT: 'left',\n  TOPLEFT: 'top',\n  TOPRIGHT: 'top',\n  RIGHTTOP: 'right',\n  RIGHTBOTTOM: 'right',\n  BOTTOMLEFT: 'bottom',\n  BOTTOMRIGHT: 'bottom',\n  LEFTTOP: 'left',\n  LEFTBOTTOM: 'left'\n};\nvar OffsetMap = {\n  AUTO: 0,\n  TOPLEFT: -1,\n  TOP: 0,\n  TOPRIGHT: +1,\n  RIGHTTOP: -1,\n  RIGHT: 0,\n  RIGHTBOTTOM: +1,\n  BOTTOMLEFT: -1,\n  BOTTOM: 0,\n  BOTTOMRIGHT: +1,\n  LEFTTOP: -1,\n  LEFT: 0,\n  LEFTBOTTOM: +1\n};\nvar HoverState = {\n  SHOW: 'show',\n  OUT: 'out'\n};\nvar ClassName = {\n  FADE: 'fade',\n  SHOW: 'show'\n};\nvar Selector = {\n  TOOLTIP: '.tooltip',\n  TOOLTIP_INNER: '.tooltip-inner',\n  ARROW: '.arrow'\n};\nvar Defaults = {\n  animation: true,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n  trigger: 'hover focus',\n  title: '',\n  delay: 0,\n  html: false,\n  placement: 'top',\n  offset: 0,\n  arrowPadding: 6,\n  container: false,\n  fallbackPlacement: 'flip',\n  callbacks: {},\n  boundary: 'scrollParent' // Transition event names\n\n};\nvar TransitionEndEvents = {\n  WebkitTransition: ['webkitTransitionEnd'],\n  MozTransition: ['transitionend'],\n  OTransition: ['otransitionend', 'oTransitionEnd'],\n  transition: ['transitionend'] // Options for Native Event Listeners (since we never call preventDefault)\n\n};\nvar EvtOpts = {\n  passive: true,\n  capture: false // Client-side tip ID counter for aria-describedby attribute\n  // Each tooltip requires a unique client side ID\n\n};\nvar NEXTID = 1;\n/* istanbul ignore next */\n\nvar generateId = function generateId(name) {\n  return \"__BV_\".concat(name, \"_\").concat(NEXTID++, \"__\");\n};\n/*\n * ToolTip class definition\n */\n\n\nvar ToolTip =\n/*#__PURE__*/\nfunction () {\n  // Main constructor\n  function ToolTip(element, config, $root) {\n    _classCallCheck(this, ToolTip);\n\n    // New tooltip object\n    this.$isEnabled = true;\n    this.$fadeTimeout = null;\n    this.$hoverTimeout = null;\n    this.$visibleInterval = null;\n    this.$hoverState = '';\n    this.$activeTrigger = {};\n    this.$popper = null;\n    this.$element = element;\n    this.$tip = null;\n    this.$id = generateId(this.constructor.NAME);\n    this.$root = $root || null;\n    this.$routeWatcher = null; // We use a bound version of the following handlers for root/modal\n    // listeners to maintain the 'this' context\n\n    this.$forceHide = this.forceHide.bind(this);\n    this.$doHide = this.doHide.bind(this);\n    this.$doShow = this.doShow.bind(this);\n    this.$doDisable = this.doDisable.bind(this);\n    this.$doEnable = this.doEnable.bind(this);\n    this._noop = _noop.default.bind(this); // Set the configuration\n\n    this.updateConfig(config);\n  } // NOTE: Overridden by PopOver class\n\n\n  _createClass(ToolTip, [{\n    key: \"updateConfig\",\n    // Update config\n    value: function updateConfig(config) {\n      // Merge config into defaults. We use \"this\" here because PopOver overrides Default\n      var updatedConfig = _objectSpread({}, this.constructor.Default, config); // Sanitize delay\n\n\n      if (config.delay && typeof config.delay === 'number') {\n        /* istanbul ignore next */\n        updatedConfig.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      } // Title for tooltip and popover\n\n\n      if (config.title && typeof config.title === 'number') {\n        /* istanbul ignore next */\n        updatedConfig.title = config.title.toString();\n      } // Content only for popover\n\n\n      if (config.content && typeof config.content === 'number') {\n        /* istanbul ignore next */\n        updatedConfig.content = config.content.toString();\n      } // Hide element original title if needed\n\n\n      this.fixTitle(); // Update the config\n\n      this.$config = updatedConfig; // Stop/Restart listening\n\n      this.unListen();\n      this.listen();\n    } // Destroy this instance\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // Stop listening to trigger events\n      this.unListen(); // Disable while open listeners/watchers\n\n      this.setWhileOpenListeners(false); // Clear any timeouts\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverTimeout = null;\n      clearTimeout(this.$fadeTimeout);\n      this.$fadeTimeout = null; // Remove popper\n\n      if (this.$popper) {\n        this.$popper.destroy();\n      }\n\n      this.$popper = null; // Remove tip from document\n\n      if (this.$tip && this.$tip.parentElement) {\n        this.$tip.parentElement.removeChild(this.$tip);\n      }\n\n      this.$tip = null; // Null out other properties\n\n      this.$id = null;\n      this.$isEnabled = null;\n      this.$root = null;\n      this.$element = null;\n      this.$config = null;\n      this.$hoverState = null;\n      this.$activeTrigger = null;\n      this.$forceHide = null;\n      this.$doHide = null;\n      this.$doShow = null;\n      this.$doDisable = null;\n      this.$doEnable = null;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      // Create a non-cancelable BvEvent\n      var enabledEvt = new _bvEvent.default('enabled', {\n        cancelable: false,\n        target: this.$element,\n        relatedTarget: null\n      });\n      this.$isEnabled = true;\n      this.emitEvent(enabledEvt);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      // Create a non-cancelable BvEvent\n      var disabledEvt = new _bvEvent.default('disabled', {\n        cancelable: false,\n        target: this.$element,\n        relatedTarget: null\n      });\n      this.$isEnabled = false;\n      this.emitEvent(disabledEvt);\n    } // Click toggler\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (!this.$isEnabled) {\n        /* istanbul ignore next */\n        return;\n      }\n      /* istanbul ignore else */\n\n\n      if (event) {\n        this.$activeTrigger.click = !this.$activeTrigger.click;\n\n        if (this.isWithActiveTrigger()) {\n          this.enter(null);\n        } else {\n          this.leave(null);\n        }\n      } else {\n        if ((0, _dom.hasClass)(this.getTipElement(), ClassName.SHOW)) {\n          this.leave(null);\n        } else {\n          this.enter(null);\n        }\n      }\n    } // Show tooltip\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this = this;\n\n      if (!document.body.contains(this.$element) || !(0, _dom.isVisible)(this.$element)) {\n        // If trigger element isn't in the DOM or is not visible\n        return;\n      } // Build tooltip element (also sets this.$tip)\n\n\n      var tip = this.getTipElement();\n      this.fixTitle();\n      this.setContent(tip);\n\n      if (!this.isWithContent(tip)) {\n        // If no content, don't bother showing\n\n        /* istanbul ignore next */\n        this.$tip = null;\n        /* istanbul ignore next */\n\n        return;\n      } // Set ID on tip and aria-describedby on element\n\n\n      (0, _dom.setAttr)(tip, 'id', this.$id);\n      this.addAriaDescribedby(); // Set animation on or off\n\n      if (this.$config.animation) {\n        (0, _dom.addClass)(tip, ClassName.FADE);\n      } else {\n        (0, _dom.removeClass)(tip, ClassName.FADE);\n      }\n\n      var placement = this.getPlacement();\n      var attachment = this.constructor.getAttachment(placement);\n      this.addAttachmentClass(attachment); // Create a cancelable BvEvent\n\n      var showEvt = new _bvEvent.default('show', {\n        cancelable: true,\n        target: this.$element,\n        relatedTarget: tip\n      });\n      this.emitEvent(showEvt);\n\n      if (showEvt.defaultPrevented) {\n        // Don't show if event cancelled\n        this.$tip = null;\n        return;\n      } // Insert tooltip if needed\n\n\n      var container = this.getContainer();\n\n      if (!document.body.contains(tip)) {\n        container.appendChild(tip);\n      } // Refresh popper\n\n\n      this.removePopper();\n      this.$popper = new _popper.default(this.$element, tip, this.getPopperConfig(placement, tip)); // Transitionend callback\n\n      var complete = function complete() {\n        if (_this.$config.animation) {\n          _this.fixTransition(tip);\n        }\n\n        var prevHoverState = _this.$hoverState;\n        _this.$hoverState = null;\n\n        if (prevHoverState === HoverState.OUT) {\n          _this.leave(null);\n        } // Create a non-cancelable BvEvent\n\n\n        var shownEvt = new _bvEvent.default('shown', {\n          cancelable: false,\n          target: _this.$element,\n          relatedTarget: tip\n        });\n\n        _this.emitEvent(shownEvt);\n      }; // Enable while open listeners/watchers\n\n\n      this.setWhileOpenListeners(true); // Show tip\n\n      (0, _dom.addClass)(tip, ClassName.SHOW); // Start the transition/animation\n\n      this.transitionOnce(tip, complete);\n    } // Handler for periodic visibility check\n\n  }, {\n    key: \"visibleCheck\",\n    value: function visibleCheck(on) {\n      var _this2 = this;\n\n      clearInterval(this.$visibleInterval);\n      this.$visibleInterval = null;\n\n      if (on) {\n        this.$visibleInterval = setInterval(function () {\n          var tip = _this2.$tip;\n\n          if (tip && !(0, _dom.isVisible)(_this2.$element) && (0, _dom.hasClass)(tip, ClassName.SHOW)) {\n            // Element is no longer visible, so force-hide the tooltip\n            _this2.forceHide();\n          }\n        }, 100);\n      }\n    }\n  }, {\n    key: \"setWhileOpenListeners\",\n    value: function setWhileOpenListeners(on) {\n      // Modal close events\n      this.setModalListener(on); // Periodic $element visibility check\n      // For handling when tip is in <keepalive>, tabs, carousel, etc\n\n      this.visibleCheck(on); // Route change events\n\n      this.setRouteWatcher(on); // On-touch start listeners\n\n      this.setOnTouchStartListener(on);\n\n      if (on && /(focus|blur)/.test(this.$config.trigger)) {\n        // If focus moves between trigger element and tip container, don't close\n        (0, _dom.eventOn)(this.$tip, 'focusout', this, EvtOpts);\n      } else {\n        (0, _dom.eventOff)(this.$tip, 'focusout', this, EvtOpts);\n      }\n    } // Force hide of tip (internal method)\n\n  }, {\n    key: \"forceHide\",\n    value: function forceHide() {\n      if (!this.$tip || !(0, _dom.hasClass)(this.$tip, ClassName.SHOW)) {\n        /* istanbul ignore next */\n        return;\n      } // Disable while open listeners/watchers\n\n\n      this.setWhileOpenListeners(false); // Clear any hover enter/leave event\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverTimeout = null;\n      this.$hoverState = ''; // Hide the tip\n\n      this.hide(null, true);\n    } // Hide tooltip\n\n  }, {\n    key: \"hide\",\n    value: function hide(callback, force) {\n      var _this3 = this;\n\n      var tip = this.$tip;\n\n      if (!tip) {\n        /* istanbul ignore next */\n        return;\n      } // Create a cancelable BvEvent\n\n\n      var hideEvt = new _bvEvent.default('hide', {\n        // We disable cancelling if force is true\n        cancelable: !force,\n        target: this.$element,\n        relatedTarget: tip\n      });\n      this.emitEvent(hideEvt);\n\n      if (hideEvt.defaultPrevented) {\n        // Don't hide if event cancelled\n        return;\n      } // Transitionend callback\n\n\n      var complete = function complete() {\n        if (_this3.$hoverState !== HoverState.SHOW && tip.parentNode) {\n          // Remove tip from DOM, and force recompile on next show\n          tip.parentNode.removeChild(tip);\n\n          _this3.removeAriaDescribedby();\n\n          _this3.removePopper();\n\n          _this3.$tip = null;\n        }\n\n        if (callback) {\n          callback();\n        } // Create a non-cancelable BvEvent\n\n\n        var hiddenEvt = new _bvEvent.default('hidden', {\n          cancelable: false,\n          target: _this3.$element,\n          relatedTarget: null\n        });\n\n        _this3.emitEvent(hiddenEvt);\n      }; // Disable while open listeners/watchers\n\n\n      this.setWhileOpenListeners(false); // If forced close, disable animation\n\n      if (force) {\n        (0, _dom.removeClass)(tip, ClassName.FADE);\n      } // Hide tip\n\n\n      (0, _dom.removeClass)(tip, ClassName.SHOW);\n      this.$activeTrigger.click = false;\n      this.$activeTrigger.focus = false;\n      this.$activeTrigger.hover = false; // Start the hide transition\n\n      this.transitionOnce(tip, complete);\n      this.$hoverState = '';\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(evt) {\n      var evtName = evt.type;\n\n      if (this.$root && this.$root.$emit) {\n        // Emit an event on $root\n        this.$root.$emit(\"bv::\".concat(this.constructor.NAME, \"::\").concat(evtName), evt);\n      }\n\n      var callbacks = this.$config.callbacks || {};\n\n      if (typeof callbacks[evtName] === 'function') {\n        callbacks[evtName](evt);\n      }\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      var container = this.$config.container;\n      var body = document.body; // If we are in a modal, we append to the modal instead of body,\n      // unless a container is specified\n\n      return container === false ? (0, _dom.closest)(MODAL_CLASS, this.$element) || body : (0, _dom.select)(container, body) || body;\n    } // Will be overridden by PopOver if needed\n\n  }, {\n    key: \"addAriaDescribedby\",\n    value: function addAriaDescribedby() {\n      // Add aria-describedby on trigger element, without removing any other IDs\n      var desc = (0, _dom.getAttr)(this.$element, 'aria-describedby') || '';\n      desc = desc.split(/\\s+/).concat(this.$id).join(' ').trim();\n      (0, _dom.setAttr)(this.$element, 'aria-describedby', desc);\n    } // Will be overridden by PopOver if needed\n\n  }, {\n    key: \"removeAriaDescribedby\",\n    value: function removeAriaDescribedby() {\n      var _this4 = this;\n\n      var desc = (0, _dom.getAttr)(this.$element, 'aria-describedby') || '';\n      desc = desc.split(/\\s+/).filter(function (d) {\n        return d !== _this4.$id;\n      }).join(' ').trim();\n\n      if (desc) {\n        /* istanbul ignore next */\n        (0, _dom.setAttr)(this.$element, 'aria-describedby', desc);\n      } else {\n        (0, _dom.removeAttr)(this.$element, 'aria-describedby');\n      }\n    }\n  }, {\n    key: \"removePopper\",\n    value: function removePopper() {\n      if (this.$popper) {\n        this.$popper.destroy();\n      }\n\n      this.$popper = null;\n    }\n  }, {\n    key: \"transitionOnce\",\n    value: function transitionOnce(tip, complete) {\n      var _this5 = this;\n\n      var transEvents = this.getTransitionEndEvents();\n      var called = false;\n      clearTimeout(this.$fadeTimeout);\n      this.$fadeTimeout = null;\n\n      var fnOnce = function fnOnce() {\n        if (called) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        called = true;\n        clearTimeout(_this5.$fadeTimeout);\n        _this5.$fadeTimeout = null;\n        transEvents.forEach(function (evtName) {\n          (0, _dom.eventOff)(tip, evtName, fnOnce, EvtOpts);\n        }); // Call complete callback\n\n        complete();\n      };\n\n      if ((0, _dom.hasClass)(tip, ClassName.FADE)) {\n        transEvents.forEach(function (evtName) {\n          (0, _dom.eventOn)(tip, evtName, fnOnce, EvtOpts);\n        }); // Fallback to setTimeout()\n\n        this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);\n      } else {\n        fnOnce();\n      }\n    } // What transitionend event(s) to use? (returns array of event names)\n\n  }, {\n    key: \"getTransitionEndEvents\",\n    value: function getTransitionEndEvents() {\n      for (var name in TransitionEndEvents) {\n        if (this.$element.style[name] !== undefined) {\n          return TransitionEndEvents[name];\n        }\n      } // Fallback\n\n      /* istanbul ignore next */\n\n\n      return [];\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.$popper !== null) {\n        this.$popper.scheduleUpdate();\n      }\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"isWithContent\",\n    value: function isWithContent(tip) {\n      tip = tip || this.$tip;\n\n      if (!tip) {\n        /* istanbul ignore next */\n        return false;\n      }\n\n      return Boolean(((0, _dom.select)(Selector.TOOLTIP_INNER, tip) || {}).innerHTML);\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"addAttachmentClass\",\n    value: function addAttachmentClass(attachment) {\n      (0, _dom.addClass)(this.getTipElement(), \"\".concat(CLASS_PREFIX, \"-\").concat(attachment));\n    }\n  }, {\n    key: \"getTipElement\",\n    value: function getTipElement() {\n      if (!this.$tip) {\n        // Try and compile user supplied template, or fallback to default template\n        this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);\n      } // Add tab index so tip can be focused, and to allow it to be\n      // set as relatedTarget in focusin/out events\n\n\n      this.$tip.tabIndex = -1;\n      return this.$tip;\n    }\n  }, {\n    key: \"compileTemplate\",\n    value: function compileTemplate(html) {\n      if (!html || typeof html !== 'string') {\n        /* istanbul ignore next */\n        return null;\n      }\n\n      var div = document.createElement('div');\n      div.innerHTML = html.trim();\n      var node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;\n      div = null;\n      return node;\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(tip) {\n      this.setElementContent((0, _dom.select)(Selector.TOOLTIP_INNER, tip), this.getTitle());\n      (0, _dom.removeClass)(tip, ClassName.FADE);\n      (0, _dom.removeClass)(tip, ClassName.SHOW);\n    }\n  }, {\n    key: \"setElementContent\",\n    value: function setElementContent(container, content) {\n      if (!container) {\n        // If container element doesn't exist, just return\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      var allowHtml = this.$config.html;\n\n      if (_typeof(content) === 'object' && content.nodeType) {\n        // Content is a DOM node\n        if (allowHtml) {\n          if (content.parentElement !== container) {\n            container.innerHTML = '';\n            container.appendChild(content);\n          }\n        } else {\n          /* istanbul ignore next */\n          container.innerText = content.innerText;\n        }\n      } else {\n        // We have a plain HTML string or Text\n        container[allowHtml ? 'innerHTML' : 'innerText'] = content;\n      }\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      var title = this.$config.title || '';\n\n      if (typeof title === 'function') {\n        // Call the function to get the title value\n\n        /* istanbul ignore next */\n        title = title(this.$element);\n      }\n\n      if (_typeof(title) === 'object' && title.nodeType && !title.innerHTML.trim()) {\n        // We have a DOM node, but without inner content,\n        // so just return empty string\n\n        /* istanbul ignore next */\n        title = '';\n      }\n\n      if (typeof title === 'string') {\n        title = title.trim();\n      }\n\n      if (!title) {\n        // If an explicit title is not given, try element's title attributes\n        title = (0, _dom.getAttr)(this.$element, 'title') || (0, _dom.getAttr)(this.$element, 'data-original-title') || '';\n        title = title.trim();\n      }\n\n      return title;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      var _this6 = this;\n\n      var triggers = this.$config.trigger.trim().split(/\\s+/);\n      var el = this.$element; // Listen for global show/hide events\n\n      this.setRootListener(true); // Using 'this' as the handler will get automatically directed to\n      // this.handleEvent and maintain our binding to 'this'\n\n      triggers.forEach(function (trigger) {\n        if (trigger === 'click') {\n          (0, _dom.eventOn)(el, 'click', _this6, EvtOpts);\n        } else if (trigger === 'focus') {\n          (0, _dom.eventOn)(el, 'focusin', _this6, EvtOpts);\n          (0, _dom.eventOn)(el, 'focusout', _this6, EvtOpts);\n        } else if (trigger === 'blur') {\n          // Used to close $tip when element looses focus\n          (0, _dom.eventOn)(el, 'focusout', _this6, EvtOpts);\n        } else if (trigger === 'hover') {\n          (0, _dom.eventOn)(el, 'mouseenter', _this6, EvtOpts);\n          (0, _dom.eventOn)(el, 'mouseleave', _this6, EvtOpts);\n        }\n      }, this);\n    }\n  }, {\n    key: \"unListen\",\n    value: function unListen() {\n      var _this7 = this;\n\n      var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave']; // Using \"this\" as the handler will get automatically directed to this.handleEvent\n\n      events.forEach(function (evt) {\n        (0, _dom.eventOff)(_this7.$element, evt, _this7, EvtOpts);\n      }, this); // Stop listening for global show/hide/enable/disable events\n\n      this.setRootListener(false);\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      // This special method allows us to use \"this\" as the event handlers\n      if ((0, _dom.isDisabled)(this.$element)) {\n        // If disabled, don't do anything. Note: If tip is shown before element gets\n        // disabled, then tip not close until no longer disabled or forcefully closed.\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (!this.$isEnabled) {\n        // If not enable\n        return;\n      }\n\n      var type = e.type;\n      var target = e.target;\n      var relatedTarget = e.relatedTarget;\n      var $element = this.$element;\n      var $tip = this.$tip;\n\n      if (type === 'click') {\n        this.toggle(e);\n      } else if (type === 'focusin' || type === 'mouseenter') {\n        this.enter(e);\n      } else if (type === 'focusout') {\n        // target is the element which is loosing focus\n        // and relatedTarget is the element gaining focus\n        if ($tip && $element && $element.contains(target) && $tip.contains(relatedTarget)) {\n          // If focus moves from $element to $tip, don't trigger a leave\n\n          /* istanbul ignore next */\n          return;\n        }\n\n        if ($tip && $element && $tip.contains(target) && $element.contains(relatedTarget)) {\n          // If focus moves from $tip to $element, don't trigger a leave\n\n          /* istanbul ignore next */\n          return;\n        }\n        /* istanbul ignore next: dificult to test */\n\n\n        if ($tip && $tip.contains(target) && $tip.contains(relatedTarget)) {\n          // If focus moves within $tip, don't trigger a leave\n          return;\n        }\n        /* istanbul ignore next: dificult to test */\n\n\n        if ($element && $element.contains(target) && $element.contains(relatedTarget)) {\n          // If focus moves within $element, don't trigger a leave\n          return;\n        } // Otherwise trigger a leave\n\n\n        this.leave(e);\n      } else if (type === 'mouseleave') {\n        this.leave(e);\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"setRouteWatcher\",\n    value: function setRouteWatcher(on) {\n      var _this8 = this;\n\n      if (on) {\n        this.setRouteWatcher(false);\n\n        if (this.$root && Boolean(this.$root.$route)) {\n          this.$routeWatcher = this.$root.$watch('$route', function (newVal, oldVal) {\n            if (newVal === oldVal) {\n              return;\n            } // If route has changed, we force hide the tooltip/popover\n\n\n            _this8.forceHide();\n          });\n        }\n      } else {\n        if (this.$routeWatcher) {\n          // Cancel the route watcher by calling the stored reference\n          this.$routeWatcher();\n          this.$routeWatcher = null;\n        }\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"setModalListener\",\n    value: function setModalListener(on) {\n      var modal = (0, _dom.closest)(MODAL_CLASS, this.$element);\n\n      if (!modal) {\n        // If we are not in a modal, don't worry. be happy\n        return;\n      } // We can listen for modal hidden events on $root\n\n\n      if (this.$root) {\n        this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.$forceHide);\n      }\n    }\n  }, {\n    key: \"setRootListener\",\n    value: function setRootListener(on) {\n      // Listen for global 'bv::{hide|show}::{tooltip|popover}' hide request event\n      if (this.$root) {\n        this.$root[on ? '$on' : '$off'](\"bv::hide::\".concat(this.constructor.NAME), this.$doHide);\n        this.$root[on ? '$on' : '$off'](\"bv::show::\".concat(this.constructor.NAME), this.$doShow);\n        this.$root[on ? '$on' : '$off'](\"bv::disable::\".concat(this.constructor.NAME), this.$doDisable);\n        this.$root[on ? '$on' : '$off'](\"bv::enable::\".concat(this.constructor.NAME), this.$doEnable);\n      }\n    }\n  }, {\n    key: \"doHide\",\n    value: function doHide(id) {\n      // Programmatically hide tooltip or popover\n      if (!id) {\n        // Close all tooltips or popovers\n        this.forceHide();\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\n        // Close this specific tooltip or popover\n        this.hide();\n      }\n    }\n  }, {\n    key: \"doShow\",\n    value: function doShow(id) {\n      // Programmatically show tooltip or popover\n      if (!id) {\n        // Open all tooltips or popovers\n        this.show();\n      } else if (id && this.$element && this.$element.id && this.$element.id === id) {\n        // Show this specific tooltip or popover\n        this.show();\n      }\n    }\n  }, {\n    key: \"doDisable\",\n    value: function doDisable(id) {\n      // Programmatically disable tooltip or popover\n      if (!id) {\n        // Disable all tooltips or popovers\n        this.disable();\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\n        // Disable this specific tooltip or popover\n        this.disable();\n      }\n    }\n  }, {\n    key: \"doEnable\",\n    value: function doEnable(id) {\n      // Programmatically enable tooltip or popover\n      if (!id) {\n        // Enable all tooltips or popovers\n        this.enable();\n      } else if (this.$element && this.$element.id && this.$element.id === id) {\n        // Enable this specific tooltip or popover\n        this.enable();\n      }\n    }\n  }, {\n    key: \"setOnTouchStartListener\",\n    value: function setOnTouchStartListener(on) {\n      var _this9 = this;\n\n      // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children\n      // Only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n      if ('ontouchstart' in document.documentElement) {\n        /* istanbul ignore next: JSDOM does not support 'ontouchstart' event */\n        (0, _array.from)(document.body.children).forEach(function (el) {\n          if (on) {\n            (0, _dom.eventOn)(el, 'mouseover', _this9._noop);\n          } else {\n            (0, _dom.eventOff)(el, 'mouseover', _this9._noop);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"fixTitle\",\n    value: function fixTitle() {\n      var el = this.$element;\n\n      var titleType = _typeof((0, _dom.getAttr)(el, 'data-original-title'));\n\n      if ((0, _dom.getAttr)(el, 'title') || titleType !== 'string') {\n        (0, _dom.setAttr)(el, 'data-original-title', (0, _dom.getAttr)(el, 'title') || '');\n        (0, _dom.setAttr)(el, 'title', '');\n      }\n    } // Enter handler\n\n  }, {\n    key: \"enter\",\n    value: function enter(e) {\n      var _this10 = this;\n\n      if (e) {\n        this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;\n      }\n\n      if ((0, _dom.hasClass)(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {\n        this.$hoverState = HoverState.SHOW;\n        return;\n      }\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverState = HoverState.SHOW;\n\n      if (!this.$config.delay || !this.$config.delay.show) {\n        this.show();\n        return;\n      }\n\n      this.$hoverTimeout = setTimeout(function () {\n        if (_this10.$hoverState === HoverState.SHOW) {\n          _this10.show();\n        }\n      }, this.$config.delay.show);\n    } // Leave handler\n\n  }, {\n    key: \"leave\",\n    value: function leave(e) {\n      var _this11 = this;\n\n      if (e) {\n        this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;\n\n        if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {\n          // Special case for `blur`: we clear out the other triggers\n          this.$activeTrigger.click = false;\n          this.$activeTrigger.hover = false;\n        }\n      }\n\n      if (this.isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(this.$hoverTimeout);\n      this.$hoverState = HoverState.OUT;\n\n      if (!this.$config.delay || !this.$config.delay.hide) {\n        this.hide();\n        return;\n      }\n\n      this.$hoverTimeout = setTimeout(function () {\n        if (_this11.$hoverState === HoverState.OUT) {\n          _this11.hide();\n        }\n      }, this.$config.delay.hide);\n    }\n  }, {\n    key: \"getPopperConfig\",\n    value: function getPopperConfig(placement, tip) {\n      var _this12 = this;\n\n      return {\n        placement: this.constructor.getAttachment(placement),\n        modifiers: {\n          offset: {\n            offset: this.getOffset(placement, tip)\n          },\n          flip: {\n            behavior: this.$config.fallbackPlacement\n          },\n          arrow: {\n            element: '.arrow'\n          },\n          preventOverflow: {\n            padding: this.$config.boundaryPadding,\n            boundariesElement: this.$config.boundary\n          }\n        },\n        onCreate: function onCreate(data) {\n          // Handle flipping arrow classes\n\n          /* istanbul ignore next */\n          if (data.originalPlacement !== data.placement) {\n            _this12.handlePopperPlacementChange(data);\n          }\n        },\n        onUpdate: function onUpdate(data) {\n          // Handle flipping arrow classes\n\n          /* istanbul ignore next */\n          _this12.handlePopperPlacementChange(data);\n        }\n      };\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"getOffset\",\n    value: function getOffset(placement, tip) {\n      if (!this.$config.offset) {\n        var arrow = (0, _dom.select)(Selector.ARROW, tip);\n        var arrowOffset = parseFloat((0, _dom.getCS)(arrow).width) + parseFloat(this.$config.arrowPadding);\n\n        switch (OffsetMap[placement.toUpperCase()]) {\n          case +1:\n            return \"+50%p - \".concat(arrowOffset, \"px\");\n\n          case -1:\n            return \"-50%p + \".concat(arrowOffset, \"px\");\n\n          default:\n            return 0;\n        }\n      }\n\n      return this.$config.offset;\n    }\n  }, {\n    key: \"getPlacement\",\n    value: function getPlacement() {\n      var placement = this.$config.placement;\n\n      if (typeof placement === 'function') {\n        /* istanbul ignore next */\n        return placement.call(this, this.$tip, this.$element);\n      }\n\n      return placement;\n    }\n  }, {\n    key: \"isWithActiveTrigger\",\n    value: function isWithActiveTrigger() {\n      for (var trigger in this.$activeTrigger) {\n        if (this.$activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    } // NOTE: Overridden by PopOver class\n\n    /* istanbul ignore next */\n\n  }, {\n    key: \"cleanTipClass\",\n    value: function cleanTipClass() {\n      var tip = this.getTipElement();\n      var tabClass = tip.className.match(BS_CLASS_PREFIX_REGEX);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.forEach(function (cls) {\n          (0, _dom.removeClass)(tip, cls);\n        });\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"handlePopperPlacementChange\",\n    value: function handlePopperPlacementChange(data) {\n      this.cleanTipClass();\n      this.addAttachmentClass(this.constructor.getAttachment(data.placement));\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"fixTransition\",\n    value: function fixTransition(tip) {\n      var initConfigAnimation = this.$config.animation || false;\n\n      if ((0, _dom.getAttr)(tip, 'x-placement') !== null) {\n        return;\n      }\n\n      (0, _dom.removeClass)(tip, ClassName.FADE);\n      this.$config.animation = false;\n      this.hide();\n      this.show();\n      this.$config.animation = initConfigAnimation;\n    }\n  }], [{\n    key: \"getAttachment\",\n    value: function getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Defaults;\n    } // NOTE: Overridden by PopOver class\n\n  }, {\n    key: \"NAME\",\n    get: function get() {\n      return NAME;\n    }\n  }]);\n\n  return ToolTip;\n}();\n\nvar _default = ToolTip;\nexports.default = _default;"],"sourceRoot":""}