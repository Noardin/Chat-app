{"version":3,"sources":["webpack:///./node_modules/vue-audio-visual/src/components/AvCircle.js","webpack:///./node_modules/vue-audio-visual/src/components/AvBars.js","webpack:///./node_modules/vue-audio-visual/src/components/AvBase.js"],"names":["_AvBase__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","props","fftSize","type","Number","default","canvWidth","canvHeight","radius","lineWidth","lineSpace","outlineColor","String","outlineWidth","barWidth","barLength","barColor","Array","progress","Boolean","progressWidth","progressColor","progressClockwise","outlineMeterSpace","playtime","playtimeFont","playtimeColor","rotateGraph","rotateSpeed","AvCircle","name","mixins","[object Object]","rotate","audio","analyser","ctx","audioCtx","methods","mainLoop","cx","this","cy","r","Math","round","arcStep","ceil","frqBits","frequencyBinCount","data","Uint8Array","step","length","PI","barLen","angle","_rotate","_setCanvas","getByteFrequencyData","_drawOutline","_drawProgress","_drawPlaytime","strokeStyle","_setBarColor","forEach","_","index","bits","slice","reduce","v","t","blen","beginPath","moveTo","cos","sin","lineTo","stroke","requestAnimationFrame","clearRect","canvFillColor","fillStyle","isArray","fillGradient","fillRect","elapsed","currentTime","duration","angleEnd","arc","m","floor","sec","s","text","tsizew","measureText","width","font","fillText","parseInt","gradient","createRadialGradient","offset","color","addColorStop","__webpack_exports__","barSpace","capsHeight","capsDropSpeed","capsColor","brickHeight","brickSpace","symmetric","AvBars","caps","apply","map","barFill","x","_fillCanvasBG","barHeight","_drawCap","_drawBar","w","h","barX","_drawBrickBar","_symAlign","b","barwidth","barY","cap","y","capY","audioSrc","refLink","audioControls","corsAnonym","audioClass","canvClass","canvTop","createHTMLElements","canv","document","createElement","canvDiv","audioDiv","$parent","$refs","setAttribute","crossOrigin","appendChild","$el","insertBefore","ctxWrapper","getContext","setAnalyser","src","$avAudioRefs","createAnalyser","AudioContext","createMediaElementSource","connect","destination","colorsArray","createLinearGradient","render","close"],"mappings":"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","file":"js/chunk-vendors~a342bb6a.e6680503.js","sourcesContent":["import BaseMixin from './AvBase'\n\n/**\n * Component props\n */\nconst props = {\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  },\n  /**\n   * prop: 'canv-width'\n   * Canvas element width. Default 100\n   */\n  canvWidth: {\n    type: Number,\n    default: 100\n  },\n  /**\n   * prop: 'canv-height'\n   * Canvas element height. Default 100\n   */\n  canvHeight: {\n    type: Number,\n    default: 100\n  },\n  /**\n   * prop: 'radius'\n   * Set cercle radius. If zero will be calculated from canvas\n   * width: (canv-width / 2) * 0.7\n   * Default: 0\n   */\n  radius: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'line-width'\n   * Frequency bit line width to draw.\n   */\n  lineWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'line-space'\n   * Space between lines to draw.\n   */\n  lineSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'outline-color'\n   * Outline (contour) style RGB color.\n   * Default: #00f\n   */\n  outlineColor: {\n    type: String,\n    default: '#0000FF'\n  },\n  /**\n   * prop: 'outline-width'\n   * Outline (contour) line width. Float value.\n   * Default: 0.3\n   */\n  outlineWidth: {\n    type: Number,\n    default: 0.3\n  },\n  /**\n   * prop: 'bar-width'\n   * Frequency graph bar width.\n   */\n  barWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'bar-length'\n   * Frequency graph bar length.\n   * Default is a difference between radius and canvas width.\n   */\n  barLength: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'bar-color'\n   * Bar style RGB color or radient gradient when array.\n   * Default: [ #FFFFFF, #0000FF ]\n   */\n  barColor: {\n    type: [String, Array],\n    default: () => [ '#FFFFFF', '#0000FF' ]\n  },\n  /**\n   * prop: 'progress'\n   * Draw play progress meter.\n   * Default: false\n   */\n  progress: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * prop: 'progress-width'\n   * Progress meter width.\n   * Default: 1\n   */\n  progressWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'progress-color'\n   * Progress meter color.\n   * Default: 1\n   */\n  progressColor: {\n    type: String,\n    default: '#0000FF'\n  },\n  /**\n   * prop: 'progress-clockwise'\n   * Progress meter arc draw direction. Default clockwise\n   * Default: true\n   */\n  progressClockwise: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'outline-meter-space'\n   * Space between outline and progress meter.\n   * Default: 2\n   */\n  outlineMeterSpace: {\n    type: Number,\n    default: 3\n  },\n  /**\n   * prop: 'playtime'\n   * Draw playtime text in the center of the circle.\n   * Default: false\n   */\n  playtime: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'playtime-font'\n   * Played time print font.\n   * Default: '14px Monaco'\n   */\n  playtimeFont: {\n    type: String,\n    default: '14px Monaco'\n  },\n  /**\n  * prop: 'playtime-color'\n  * Played time font color.\n  * Default: '#00f'\n  */\n  playtimeColor: {\n    type: String,\n    default: '#00f'\n  },\n  /**\n   * prop: 'rotate-graph'\n   * Rotate graph clockwise enable.\n   * Default: false\n   */\n  rotateGraph: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'rotate-speed'\n   * Rotate graph speed.\n   * Default: 0.001\n   */\n  rotateSpeed: {\n    type: Number,\n    default: 0.001\n  }\n}\n\n/**\n * Component AvCircle\n */\nconst AvCircle = {\n  name: 'av-circle',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      rotate: 1.5,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null\n    }\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const cx = this.canvWidth / 2 // center X\n      const cy = this.canvHeight / 2 // center Y\n      const r = this.radius ? this.radius : Math.round(this.canvWidth / 2 * 0.7)\n      const lineWidth = this.lineWidth\n      const lineSpace = this.lineSpace\n      const arcStep = Math.ceil(lineWidth + lineSpace)\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const step = ((lineWidth + lineSpace) / data.length) * (2 * Math.PI)\n      const barLen = this.barLength > 0\n        ? this.barLength\n        : (this.canvWidth / 2) - r\n      let angle = Math.PI * this._rotate() // start from top\n\n      this._setCanvas()\n      this.analyser.getByteFrequencyData(data)\n\n      // contour outline\n      if (this.outlineWidth > 0) {\n        this._drawOutline(r, cx, cy)\n      }\n\n      // draw play progress meter\n      if (this.progress) {\n        this._drawProgress(r, cx, cy)\n      }\n\n      // draw played time\n      if (this.playtime) {\n        this._drawPlaytime(cx, cy)\n      }\n\n      // circle bar lines\n      this.ctx.lineWidth = this.barWidth\n      this.ctx.strokeStyle = this._setBarColor(cx, cy)\n\n      data.forEach((_, index) => {\n        angle += step\n        if (index % arcStep) {\n          return\n        }\n        const bits = Math.round(data.slice(index, index + arcStep)\n          .reduce((v, t) => t + v, 0) / arcStep)\n\n        const blen = r + (bits / 255.0 * barLen)\n        this.ctx.beginPath()\n        this.ctx.moveTo(r * Math.cos(angle) + cx, r * Math.sin(angle) + cy)\n        this.ctx.lineTo(blen * Math.cos(angle) + cx, blen * Math.sin(angle) + cy)\n        this.ctx.stroke()\n      })\n\n      requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      this.ctx.clearRect(0, 0, this.canvWidth, this.canvHeight)\n\n      if (!this.canvFillColor) return\n\n      this.ctx.fillStyle = Array.isArray(this.canvFillColor)\n        ? this.fillGradient(this.canvFillColor)\n        : this.canvFillColor\n      this.ctx.fillRect(0, 0, this.canvWidth, this.canvHeight)\n    },\n    /**\n     * Draw play progress meter\n     */\n    _drawProgress: function (r, cx, cy) {\n      const elapsed = this.audio.currentTime / this.audio.duration * 2 * Math.PI\n      const angleEnd = Math.PI * 1.5 + elapsed\n\n      if (!elapsed) return\n\n      this.ctx.lineWidth = this.progressWidth\n      this.ctx.strokeStyle = this.progressColor\n\n      this.ctx.beginPath()\n      this.ctx.arc(cx, cy, r - this.outlineWidth - this.outlineMeterSpace,\n        1.5 * Math.PI, angleEnd, this.progressClockwise)\n      this.ctx.stroke()\n    },\n    /**\n     * Draw outline circle\n     */\n    _drawOutline: function (r, cx, cy) {\n      this.ctx.beginPath()\n      this.ctx.strokeStyle = this.outlineColor\n      this.ctx.lineWidth = this.outlineWidth\n      this.ctx.arc(cx, cy, r, 0, 2 * Math.PI)\n      this.ctx.stroke()\n    },\n    /**\n     * Draw played time\n     */\n    _drawPlaytime: function (cx, cy) {\n      const m = Math.floor(this.audio.currentTime / 60)\n      const sec = Math.floor(this.audio.currentTime) % 60\n      const s = sec < 10 ? `0${sec}` : `${sec}`\n      const text = `${m}:${s}`\n      const tsizew = Math.ceil(this.ctx.measureText(text).width)\n\n      this.ctx.font = this.playtimeFont\n      this.ctx.fillStyle = this.playtimeColor\n      this.ctx.fillText(text, cx - Math.round(tsizew / 2), cy + 0.25 * parseInt(this.playtimeFont))\n    },\n    /**\n     * If rotate is enabled will return rotated angle\n     */\n    _rotate: function () {\n      if (this.rotateGraph) {\n        this.rotate = this.rotate === 3.5 ? 1.5 : this.rotate + this.rotateSpeed\n      } else {\n        this.rotate = 1.5\n      }\n      return this.rotate\n    },\n    /**\n     * Set bars color.\n     */\n    _setBarColor: function (cx, cy) {\n      if (!Array.isArray(this.barColor)) {\n        return this.barColor\n      }\n      const gradient = this.ctx.createRadialGradient(cx, cy, this.canvWidth / 2, cx, cy, 0)\n      let offset = 0\n\n      this.barColor.forEach(color => {\n        gradient.addColorStop(offset, color)\n        offset += (1 / this.barColor.length)\n      })\n      return gradient\n    }\n  }\n}\n\nexport default AvCircle\n","import BaseMixin from './AvBase'\n/**\n * Component props Object\n */\nconst props = {\n  /**\n   * prop: 'bar-width'\n   * Width of the bar in pixels.\n   * Default: 5\n   */\n  barWidth: {\n    type: Number,\n    default: 5\n  },\n  /**\n   * prop: 'bar-space'\n   * Space between bars.\n   * Default: 1\n   */\n  barSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'bar-color'\n   * Bar fill color. Can be string RGB color or canvas gradients array.\n   */\n  barColor: {\n    type: [String, Array],\n    default: '#0A0AFF'\n  },\n  /**\n   * prop: 'caps-height'\n   * Create caps on bars with given height in pixels.\n   * If zero caps then skip creating bars.\n   * Default: 0\n   */\n  capsHeight: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'caps-drop-speed'\n   * Caps drop down animation speed.\n   * Default: 0.9\n   */\n  capsDropSpeed: {\n    type: Number,\n    default: 0.9\n  },\n  /**\n   * prop: 'caps-color'\n   * Caps rectangles RGB color.\n   */\n  capsColor: {\n    type: String,\n    default: '#A0A0FF'\n  },\n  /**\n   * prop: 'brick-height'\n   * Draw bar as bricks with set height.\n   */\n  brickHeight: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'brick-space'\n   * Space between bricks.\n   */\n  brickSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'symmetric'\n   * Draw bars symmetric to canvas vertical center\n   * Default: false\n   */\n  symmetric: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  }\n}\n\n/**\n * Component AvBars\n */\nconst AvBars = {\n  name: 'av-bars',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null,\n      caps: Array.apply(null, Array(this.fftSize / 2)).map(() => 0)\n    }\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const barWidth = this.barWidth >= this.canvWidth ? this.canvWidth : this.barWidth\n      const step = Math.round((barWidth + this.barSpace) / frqBits * this.canvWidth)\n      const barFill = Array.isArray(this.barColor)\n        ? this.fillGradient(this.barColor)\n        : this.barColor\n      let x = 0\n\n      this.analyser.getByteFrequencyData(data)\n      this._fillCanvasBG()\n\n      data.forEach((_, index) => {\n        if (index % step) return\n        const bits = Math.round(data.slice(index, index + step)\n          .reduce((v, t) => t + v, 0) / step)\n        const barHeight = bits / 255 * this.canvHeight\n        if (this.capsHeight) {\n          this._drawCap(index, barWidth, x, bits)\n        }\n        this.ctx.fillStyle = barFill\n        this._drawBar(barWidth, barHeight, x)\n        x += barWidth + this.barSpace\n      })\n      requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas background fill\n     * @private\n     */\n    _fillCanvasBG: function () {\n      const w = this.canvWidth\n      const h = this.canvHeight\n      this.ctx.clearRect(0, 0, w, h)\n      if (this.canvFillColor) {\n        this.ctx.fillStyle = Array.isArray(this.canvFillColor)\n          ? this.fillGradient(this.canvFillColor)\n          : this.canvFillColor\n        this.ctx.fillRect(0, 0, w, h)\n      }\n    },\n    /**\n     * Draw bar. Solid bar or brick bar.\n     * @private\n     */\n    _drawBar: function (barWidth, barHeight, barX) {\n      if (this.brickHeight) {\n        this._drawBrickBar(barWidth, barHeight, barX)\n      } else {\n        this.ctx.fillRect(\n          barX, this.canvHeight - barHeight - this._symAlign(barHeight),\n          barWidth, barHeight\n        )\n      }\n    },\n    /**\n     * Draw bricks bar.\n     * @private\n     */\n    _drawBrickBar: function (barWidth, barHeight, barX) {\n      for (let b = 0; b < barHeight; b += this.brickHeight + this.brickSpace) {\n        this.ctx.fillRect(\n          barX, this.canvHeight - barHeight + b - this._symAlign(barHeight),\n          barWidth, this.brickHeight\n        )\n      }\n    },\n    /**\n     * Draw cap for each bar and animate caps falling down.\n     * @private\n     */\n    _drawCap: function (index, barwidth, barX, barY) {\n      const cap = this.caps[index] <= barY\n        ? barY\n        : this.caps[index] - this.capsDropSpeed\n      const y = (cap / 255.0 * this.canvHeight)\n      const capY = this.canvHeight - y - this.capsHeight - this._symAlign(y)\n      this.ctx.fillStyle = this.capsColor\n      this.ctx.fillRect(barX, capY, barwidth, this.capsHeight)\n      if (this.symmetric) {\n        this.ctx.fillRect(\n          barX, this.canvHeight - capY - this.capsHeight,\n          barwidth, this.capsHeight)\n      }\n      this.caps[index] = cap\n    },\n    /**\n     * Shift for symmetric alignment\n     * @private\n     */\n    _symAlign: function (barHeight) {\n      return this.symmetric ? ((this.canvHeight - barHeight) / 2) : 0\n    }\n  }\n}\n\nexport default AvBars\n","/**\n * Mixin component with base and common properties and functions.\n */\n\n/**\n * Base properties common for the audio-visual components\n */\nconst props = {\n  /**\n   * prop: 'audio-src'\n   * Audio element src attribute. When provided creates audio element\n   */\n  audioSrc: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'ref-link'\n   * Refrence to Audio element. When provided, then local audio element\n   * is not created and use refrence to the element. Component will\n   * search only for its parent refs.\n   */\n  refLink: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'audio-controls'\n   * Audio element controls attribute. When provided should\n   * display audio element with controls\n   */\n  audioControls: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * prop: 'cors-anonym'\n   * CORS requests for this element will not have the credentials flag set.\n   * Set crossOrigin property of audio element to 'anonymous'.\n   * Default: null\n   */\n  corsAnonym: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'audio-class'\n   * Audio element css class name.\n   */\n  audioClass: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'canv-width'\n   * Canvas element width. Default 300\n   */\n  canvWidth: {\n    type: Number,\n    default: 300\n  },\n  /**\n   * prop: 'canv-height'\n   * Canvas element height. Default 80\n   */\n  canvHeight: {\n    type: Number,\n    default: 80\n  },\n  /**\n   * prop: 'canv-class'\n   * Canvas element css class name.\n   */\n  canvClass: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'canv-top'\n   * Canvas element position on top relatively to audio element.\n   * Default: false\n   */\n  canvTop: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'canv-fill-color'\n   * Canvas fill background color. Can be string RGB color or canvas gradients array.\n   * Default is transperent.\n   */\n  canvFillColor: {\n    type: [String, Array],\n    default: null\n  }\n}\n\nconst methods = {\n  /**\n   * Create audio and canvas elements and insert in the HTML template.\n   * Using document.createElement to avoid Vue virtual DOM re-rendering\n   * which can lead to infinit loops.\n   */\n  createHTMLElements: function () {\n    const canv = document.createElement('canvas')\n    const canvDiv = document.createElement('div')\n    let audioDiv = null\n    let audio = null\n\n    if (this.refLink) {\n      audio = this.$parent.$refs[this.refLink]\n    } else {\n      audio = document.createElement('audio')\n      audioDiv = document.createElement('div')\n      audio.setAttribute('src', this.audioSrc)\n      if (this.audioControls) audio.setAttribute('controls', true)\n      if (this.audioClass) audio.setAttribute('class', this.audioClass)\n      if (this.corsAnonym) audio.crossOrigin = 'anonymous'\n      audioDiv.appendChild(audio)\n      this.$el.appendChild(audioDiv)\n    }\n\n    if (this.canvClass) canv.setAttribute('class', this.canvClass)\n    if (this.canvWidth) canv.setAttribute('width', this.canvWidth)\n    if (this.canvHeight) canv.setAttribute('height', this.canvHeight)\n    canvDiv.appendChild(canv)\n\n    if (this.canvTop) {\n      this.$el.insertBefore(canvDiv, audioDiv)\n    } else {\n      this.$el.appendChild(canvDiv)\n    }\n    this.ctxWrapper = canv\n    this.ctx = canv.getContext('2d')\n\n    this.audio = audio\n  },\n  /**\n   * Set audio context analyser.\n   */\n  setAnalyser: function () {\n    let src = null\n    let ctx = null\n    if (this.refLink) {\n      if (this.$avAudioRefs[this.refLink]) {\n        src = this.$avAudioRefs[this.refLink].src\n        ctx = this.$avAudioRefs[this.refLink].ctx\n        this.analyser = ctx.createAnalyser()\n      } else {\n        ctx = new AudioContext()\n        this.analyser = ctx.createAnalyser()\n        src = ctx.createMediaElementSource(this.audio)\n        this.$avAudioRefs[this.refLink] = {src: src, ctx: ctx}\n      }\n    } else {\n      ctx = new AudioContext()\n      this.analyser = ctx.createAnalyser()\n      src = ctx.createMediaElementSource(this.audio)\n    }\n\n    src.connect(this.analyser)\n    this.analyser.fftSize = this.fftSize\n    this.analyser.connect(ctx.destination)\n\n    this.audioCtx = ctx\n  },\n  /**\n   * Canvas gradient. Vertical, from top down\n   */\n  fillGradient: function (colorsArray) {\n    const w = this.canvWidth\n    const h = this.canvHeight\n    const gradient = this.ctx.createLinearGradient(w / 2, 0, w / 2, h)\n    let offset = 0\n    colorsArray.forEach(color => {\n      gradient.addColorStop(offset, color)\n      offset += (1 / colorsArray.length)\n    })\n    return gradient\n  }\n}\n\nexport default {\n  props,\n  render: h => h('div'),\n  mounted () {\n    this.createHTMLElements()\n    this.setAnalyser()\n    this.mainLoop()\n  },\n  beforeDestroy () {\n    this.audioCtx.close()\n  },\n  methods\n}\n"],"sourceRoot":""}