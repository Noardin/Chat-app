{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.regexp.match.js"],"names":["anObject","__webpack_require__","toLength","advanceStringIndex","regExpExec","defined","MATCH","$match","maybeCallNative","regexp","O","this","fn","undefined","call","RegExp","String","res","done","value","rx","S","global","fullUnicode","unicode","lastIndex","result","A","n","matchStr"],"mappings":"gHAEA,IAAAA,EAAeC,EAAQ,QACvBC,EAAeD,EAAQ,QACvBE,EAAyBF,EAAQ,QACjCG,EAAiBH,EAAQ,QAGzBA,EAAQ,OAARA,CAAuB,mBAAAI,EAAAC,EAAAC,EAAAC,GACvB,OAGA,SAAAC,GACA,IAAAC,EAAAL,EAAAM,MACAC,OAAAC,GAAAJ,OAAAI,EAAAJ,EAAAH,GACA,YAAAO,IAAAD,IAAAE,KAAAL,EAAAC,GAAA,IAAAK,OAAAN,GAAAH,GAAAU,OAAAN,KAIA,SAAAD,GACA,IAAAQ,EAAAT,EAAAD,EAAAE,EAAAE,MACA,GAAAM,EAAAC,KAAA,OAAAD,EAAAE,MACA,IAAAC,EAAApB,EAAAS,GACAY,EAAAL,OAAAL,MACA,IAAAS,EAAAE,OAAA,OAAAlB,EAAAgB,EAAAC,GACA,IAAAE,EAAAH,EAAAI,QACAJ,EAAAK,UAAA,EACA,IAEAC,EAFAC,EAAA,GACAC,EAAA,EAEA,cAAAF,EAAAtB,EAAAgB,EAAAC,IAAA,CACA,IAAAQ,EAAAb,OAAAU,EAAA,IACAC,EAAAC,GAAAC,EACA,KAAAA,IAAAT,EAAAK,UAAAtB,EAAAkB,EAAAnB,EAAAkB,EAAAK,WAAAF,IACAK,IAEA,WAAAA,EAAA,KAAAD","file":"js/about~6a415538.fc287488.js","sourcesContent":["'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n"],"sourceRoot":""}