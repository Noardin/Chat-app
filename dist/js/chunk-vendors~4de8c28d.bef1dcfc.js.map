{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/stringify-object-values.js","webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/stringify-record-values.js","webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/sanitize-row.js","webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/text-selection-active.js"],"names":["exports","__esModule","default","stringifyObjectValues","_object","__webpack_require__","val","Object","Date","keys","sort","filter","v","undefined","map","k","join","String","stringifyRecordValues","_sanitizeRow","_interopRequireDefault","_stringifyObjectValues","obj","row","sanitizeRow","_constants","reduce","key","IGNORED_FIELD_KEYS","textSelectionActive","_dom","el","arguments","length","document","win","window","getSelection","toString","isElement","sel","containsNode"],"mappings":"wHAEAA,EAAAC,YAAA,EACAD,EAAAE,QAAAC,EAEA,IAAAC,EAAcC,EAAQ,QActB,SAAAF,EAAAG,GACA,2BAAAA,GAAA,OAAAA,EAEA,GAGAA,aAAAC,UAAAD,aAAAE,OAGA,EAAAJ,EAAAK,MAAAH,GAAAI,OAEAC,OAAA,SAAAC,GACA,YAAAC,IAAAD,GAAA,OAAAA,IAGAE,IAAA,SAAAC,GACA,OAAAZ,EAAAG,EAAAS,MACKC,KAAA,KAGLC,OAAAX,yCCrCAN,EAAAC,YAAA,EACAD,EAAAE,QAAAgB,EAEA,IAAAC,EAAAC,EAA0Cf,EAAQ,SAElDgB,EAAAD,EAAoDf,EAAQ,SAE5D,SAAAe,EAAAE,GAAsC,OAAAA,KAAArB,WAAAqB,EAAA,CAAuCpB,QAAAoB,GAI7E,SAAAJ,EAAAK,GAEA,OAAAA,aAAAhB,QACA,EAAAc,EAAAnB,UAAA,EAAAiB,EAAAjB,SAAAqB,IAGA,uCCjBAvB,EAAAC,YAAA,EACAD,EAAAE,QAAAsB,EAEA,IAAApB,EAAcC,EAAQ,QAEtBoB,EAAiBpB,EAAQ,QAIzB,SAAAmB,EAAAD,GACA,SAAAnB,EAAAK,MAAAc,GAAAG,OAAA,SAAAJ,EAAAK,GAMA,OAJAF,EAAAG,mBAAAD,KACAL,EAAAK,GAAAJ,EAAAI,IAGAL,GACG,wCCjBHtB,EAAAC,YAAA,EACAD,EAAAE,QAAA2B,EAEA,IAAAC,EAAWzB,EAAQ,QAOnB,SAAAwB,IACA,IAAAE,EAAAC,UAAAC,OAAA,QAAApB,IAAAmB,UAAA,GAAAA,UAAA,GAAAE,SACAC,EAAAC,OAGA,GAAAD,KAAAE,cAAA,KAAAF,EAAAE,eAAAC,aAAA,EAAAR,EAAAS,WAAAR,GAAA,CAEA,IAAAS,EAAAL,EAAAE,eAGA,QAAAG,EAAAC,cAAAD,EAAAC,aAAAV,GAAA,GAEA","file":"js/chunk-vendors~4de8c28d.bef1dcfc.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = stringifyObjectValues;\n\nvar _object = require(\"../../../utils/object\");\n\n// Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are storted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Primatives (numbers/strings) are returned as-is\n// Null and undefined values are filtered out\n// Dates are converted to their native string format\n//\nfunction stringifyObjectValues(val) {\n  if (typeof val === 'undefined' || val === null) {\n    /* istanbul ignore next */\n    return '';\n  }\n\n  if (val instanceof Object && !(val instanceof Date)) {\n    // Arrays are also object, and keys just returns the array indexes\n    // Date objects we convert to strings\n    return (0, _object.keys)(val).sort()\n    /* sort to prevent SSR issues on pre-rendered sorted tables */\n    .filter(function (v) {\n      return v !== undefined && v !== null;\n    })\n    /* ignore undefined/null values */\n    .map(function (k) {\n      return stringifyObjectValues(val[k]);\n    }).join(' ');\n  }\n\n  return String(val);\n}","\"use strict\";\n\nexports.__esModule = true;\nexports.default = stringifyRecordValues;\n\nvar _sanitizeRow = _interopRequireDefault(require(\"./sanitize-row\"));\n\nvar _stringifyObjectValues = _interopRequireDefault(require(\"./stringify-object-values\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Stringifies the values of a record, ignoring any special top level field keys\n// TODO: add option to strigify formatted/scopedSlot items, and only specific fields\nfunction stringifyRecordValues(row) {\n  /* istanbul ignore else */\n  if (row instanceof Object) {\n    return (0, _stringifyObjectValues.default)((0, _sanitizeRow.default)(row));\n  } else {\n    /* istanbul ignore next */\n    return '';\n  }\n}","\"use strict\";\n\nexports.__esModule = true;\nexports.default = sanitizeRow;\n\nvar _object = require(\"../../../utils/object\");\n\nvar _constants = require(\"./constants\");\n\n// Return a copy of a row after all reserved fields have been filtered out\n// TODO: add option to specify which fields to include\nfunction sanitizeRow(row) {\n  return (0, _object.keys)(row).reduce(function (obj, key) {\n    // Ignore special fields that start with _\n    if (!_constants.IGNORED_FIELD_KEYS[key]) {\n      obj[key] = row[key];\n    }\n\n    return obj;\n  }, {});\n}","\"use strict\";\n\nexports.__esModule = true;\nexports.default = textSelectionActive;\n\nvar _dom = require(\"../../../utils/dom\");\n\n// Helper to determine if a there is an active text selection on the document page.\n// Used to filter out click events caused by the mouse up at end of selection\n//\n// Accepts an element as only argument to test to see if selection overlaps or is\n// contained within the element\nfunction textSelectionActive() {\n  var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  var win = window;\n  /* istanbul ignore if: JSDOM doesn't support getSelection */\n\n  if (win && win.getSelection && win.getSelection().toString() !== '' && (0, _dom.isElement)(el)) {\n    /* istanbul ignore next: JSDOM doesn't support getSelection */\n    var sel = win.getSelection();\n    /* istanbul ignore next: JSDOM doesn't support getSelection */\n\n    return sel.containsNode ? sel.containsNode(el, true) : false;\n  } else {\n    return false;\n  }\n}"],"sourceRoot":""}