{"version":3,"sources":["webpack:///./node_modules/bootstrap-vue/es/components/table/helpers/mixin-sorting.js"],"names":["exports","__esModule","default","_stableSort","_interopRequireDefault","__webpack_require__","_startcase","_array","_defaultSortCompare","obj","_default","props","sortBy","type","String","sortDesc","Boolean","sortDirection","validator","direction","arrayIncludes","sortCompare","Function","noSortReset","labelSortAsc","labelSortDesc","labelSortClear","noLocalSorting","noFooterSorting","data","localSortBy","this","localSortDesc","computed","localSorting","hasProvider","noProviderSorting","isSortable","computedFields","some","f","sortable","sortedItems","items","filteredItems","slice","a","b","result","undefined","watch","newVal","oldVal","$on","handleSort","$off","$emit","created","methods","key","field","evt","isFoot","_this","sortChanged","toggleLocalSortDesc","context","sortTheadThClasses","sortTheadThAttrs","ariaLabel","label","trim","headerTitle","ariaLabelSorting","filter","join","ariaSort","aria-label","aria-sort"],"mappings":"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","file":"js/chunk-vendors~aa4519b6.387cf503.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _stableSort = _interopRequireDefault(require(\"../../../utils/stable-sort\"));\n\nvar _startcase = _interopRequireDefault(require(\"../../../utils/startcase\"));\n\nvar _array = require(\"../../../utils/array\");\n\nvar _defaultSortCompare = _interopRequireDefault(require(\"./default-sort-compare\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  props: {\n    sortBy: {\n      type: String,\n      default: null\n    },\n    sortDesc: {\n      // To Do: Make this tri-state: true, false, null\n      type: Boolean,\n      default: false\n    },\n    sortDirection: {\n      // This prop is named incorrectly.\n      // It should be initialSortDirection\n      // As it is a bit misleading (not to mention screws up\n      // the Aria Label on the headers)\n      type: String,\n      default: 'asc',\n      validator: function validator(direction) {\n        return (0, _array.arrayIncludes)(['asc', 'desc', 'last'], direction);\n      }\n    },\n    sortCompare: {\n      type: Function,\n      default: null\n    },\n    noSortReset: {\n      // Another prop that should have had a better name.\n      // It should be noSortClear (on non-sortable headers).\n      // We will need to make sure the documentation is clear on what\n      // this prop does (as well as in the code for future reference)\n      type: Boolean,\n      default: false\n    },\n    labelSortAsc: {\n      type: String,\n      default: 'Click to sort Ascending'\n    },\n    labelSortDesc: {\n      type: String,\n      default: 'Click to sort Descending'\n    },\n    labelSortClear: {\n      type: String,\n      default: 'Click to clear sorting'\n    },\n    noLocalSorting: {\n      type: Boolean,\n      default: false\n    },\n    noFooterSorting: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localSortBy: this.sortBy || '',\n      localSortDesc: this.sortDesc || false\n    };\n  },\n  computed: {\n    localSorting: function localSorting() {\n      return this.hasProvider ? !!this.noProviderSorting : !this.noLocalSorting;\n    },\n    isSortable: function isSortable() {\n      return this.computedFields.some(function (f) {\n        return f.sortable;\n      });\n    },\n    sortedItems: function sortedItems() {\n      // Sorts the filtered items and returns a new array of the sorted items\n      // or the original items array if not sorted.\n      var items = (this.filteredItems || []).slice();\n      var sortBy = this.localSortBy;\n      var sortDesc = this.localSortDesc;\n      var sortCompare = this.sortCompare;\n      var localSorting = this.localSorting;\n\n      if (sortBy && localSorting) {\n        // stableSort returns a new array, and leaves the original array intact\n        return (0, _stableSort.default)(items, function (a, b) {\n          var result = null;\n\n          if (typeof sortCompare === 'function') {\n            // Call user provided sortCompare routine\n            result = sortCompare(a, b, sortBy, sortDesc);\n          }\n\n          if (result === null || result === undefined || result === false) {\n            // Fallback to built-in defaultSortCompare if sortCompare\n            // is not defined or returns null/false\n            result = (0, _defaultSortCompare.default)(a, b, sortBy);\n          } // Negate result if sorting in descending order\n\n\n          return (result || 0) * (sortDesc ? -1 : 1);\n        });\n      }\n\n      return items;\n    }\n  },\n  watch: {\n    isSortable: function isSortable(newVal, oldVal)\n    /* istanbul ignore next: pain in the butt to test */\n    {\n      if (newVal) {\n        if (this.isSortable) {\n          this.$on('head-clicked', this.handleSort);\n        }\n      } else {\n        this.$off('head-clicked', this.handleSort);\n      }\n    },\n    sortDesc: function sortDesc(newVal, oldVal) {\n      if (newVal === this.localSortDesc) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localSortDesc = newVal || false;\n    },\n    sortBy: function sortBy(newVal, oldVal) {\n      if (newVal === this.localSortBy) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localSortBy = newVal || null;\n    },\n    // Update .sync props\n    localSortDesc: function localSortDesc(newVal, oldVal) {\n      // Emit update to sort-desc.sync\n      if (newVal !== oldVal) {\n        this.$emit('update:sortDesc', newVal);\n      }\n    },\n    localSortBy: function localSortBy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:sortBy', newVal);\n      }\n    }\n  },\n  created: function created() {\n    if (this.isSortable) {\n      this.$on('head-clicked', this.handleSort);\n    }\n  },\n  methods: {\n    // Handlers\n    // Need to move from thead-mixin\n    handleSort: function handleSort(key, field, evt, isFoot) {\n      var _this = this;\n\n      if (!this.isSortable) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (isFoot && this.noFooterSorting) {\n        return;\n      } // TODO: make this tri-state sorting\n      // cycle desc => asc => none => desc => ...\n\n\n      var sortChanged = false;\n\n      var toggleLocalSortDesc = function toggleLocalSortDesc() {\n        var sortDirection = field.sortDirection || _this.sortDirection;\n\n        if (sortDirection === 'asc') {\n          _this.localSortDesc = false;\n        } else if (sortDirection === 'desc') {\n          _this.localSortDesc = true;\n        } else {// sortDirection === 'last'\n          // Leave at last sort direction from previous column\n        }\n      };\n\n      if (field.sortable) {\n        if (key === this.localSortBy) {\n          // Change sorting direction on current column\n          this.localSortDesc = !this.localSortDesc;\n        } else {\n          // Start sorting this column ascending\n          this.localSortBy = key; // this.localSortDesc = false\n\n          toggleLocalSortDesc();\n        }\n\n        sortChanged = true;\n      } else if (this.localSortBy && !this.noSortReset) {\n        this.localSortBy = null;\n        toggleLocalSortDesc();\n        sortChanged = true;\n      }\n\n      if (sortChanged) {\n        // Sorting parameters changed\n        this.$emit('sort-changed', this.context);\n      }\n    },\n    // methods to compute classes and attrs for thead>th cells\n    sortTheadThClasses: function sortTheadThClasses(key, field, isFoot) {\n      return {// No Classes for sorting currently...\n        // All styles targeted using aria-* attrs\n      };\n    },\n    sortTheadThAttrs: function sortTheadThAttrs(key, field, isFoot) {\n      if (!this.isSortable || isFoot && this.noFooterSorting) {\n        // No atributes if not a sortable table\n        return {};\n      }\n\n      var sortable = field.sortable;\n      var ariaLabel = '';\n\n      if ((!field.label || !field.label.trim()) && !field.headerTitle) {\n        // In case field's label and title are empty/blank, we need to\n        // add a hint about what the column is about for non-sighted users.\n        // This is dulicated code from tbody-row mixin, but we need it\n        // here as well, since we overwrite the original aria-label.\n\n        /* istanbul ignore next */\n        ariaLabel = (0, _startcase.default)(key);\n      } // The correctness of these labels is very important for screen-reader users.\n\n\n      var ariaLabelSorting = '';\n\n      if (sortable) {\n        if (this.localSortBy === key) {\n          // currently sorted sortable column.\n          ariaLabelSorting = this.localSortDesc ? this.labelSortAsc : this.labelSortDesc;\n        } else {\n          // Not currently sorted sortable column.\n          // Not using nested ternary's here for clarity/readability\n          // Default for ariaLabel\n          ariaLabelSorting = this.localSortDesc ? this.labelSortDesc : this.labelSortAsc; // Handle sortDirection setting\n\n          var sortDirection = this.sortDirection || field.sortDirection;\n\n          if (sortDirection === 'asc') {\n            ariaLabelSorting = this.labelSortAsc;\n          } else if (sortDirection === 'desc') {\n            ariaLabelSorting = this.labelSortDesc;\n          }\n        }\n      } else if (!this.noSortReset) {\n        // Non sortable column\n        ariaLabelSorting = this.localSortBy ? this.labelSortClear : '';\n      } // Assemble the aria-label attribute value\n\n\n      ariaLabel = [ariaLabel.trim(), ariaLabelSorting.trim()].filter(Boolean).join(': '); // Assemble the aria-sort attribute value\n\n      var ariaSort = sortable && this.localSortBy === key ? this.localSortDesc ? 'descending' : 'ascending' : sortable ? 'none' : null; // Return the attributes\n      // (All the above just to get these two values)\n\n      return {\n        'aria-label': ariaLabel || null,\n        'aria-sort': ariaSort\n      };\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}